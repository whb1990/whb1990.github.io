<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git对象]]></title>
    <url>%2F2019%2F06%2F06%2FGit%E5%AF%B9%E8%B1%A1.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Git工作区、暂存区、HEAD]]></title>
    <url>%2F2019%2F06%2F06%2FGit%E5%B7%A5%E4%BD%9C%E5%8C%BA%E3%80%81%E6%9A%82%E5%AD%98%E5%8C%BA%E3%80%81HEAD.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Git初始化版本库]]></title>
    <url>%2F2019%2F06%2F06%2FGit%E5%88%9D%E5%A7%8B%E5%8C%96%E7%89%88%E6%9C%AC%E5%BA%93.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[爱上Git的理由]]></title>
    <url>%2F2019%2F06%2F05%2F%E7%88%B1%E4%B8%8AGit%E7%9A%84%E7%90%86%E7%94%B1.html</url>
    <content type="text"><![CDATA[现场版本控制 现场版本库创建。直接在需要版本控制的目录下执行Git版本库初始化命令。 1git init 添加文件并提交 12git add -Agit commit -m &quot;本次提交的内容描述&quot; 为初始提交建立一个里程碑：”v1” 1git tag v1 然后开始在工作区中工作–修改文件，提交 1git commit -a 当对修改结果满意，想将工作成功保存带走时，可以通过下面的命令，将从v1开始的历次提交逐一导出为补丁文件。转换的补丁文件都包含一个数字前缀，并提取提交日志信息作为文件名，而且补丁文件还提供对二进制文件的支持。 1git format-patch v1..HEAD 通过邮件将补丁文件发出。当然也可以通过其他方式将补丁文件带走。 1git send-email *.patch Git创建的补丁文件使用了Git扩展格式，因此在导入时为了避免数据遗漏，要使用Git提供的命令而不能使用GNU patch命令。即时要导入的不是Git版本库，也可以使用Git命令。 修改提交说明1git commit --amend 这个命令如果不带”-m”参数，会进入提交提交说明编辑界面，修改原来的提交说明，直到满意为止。 如果要修改某个历史提交的提交说明，Git也可以实现，但要用到另一个命令：变基命令。例如要修改所标识提交的提交说明，执行下面的命令，并在弹出的变基索引文件中修改相应提交前面的动作的关键字。1git rebase -i &lt;commit-id&gt;^ 删除不应提交的文件12git rm --cached 文件名git commit --amend 如果是历史版本，例如是在所标识的提交中引入的文件，则需要使用变基操作。1git rebase -i &lt;commit-id&gt;^ 更好用的提交列表git add 命令将修改内容加入提交暂存区。git add -u 命令可以将所有修改过的文件加入暂存区。git add -A 命令可以将本地删除文件和新增文件都登记到暂存区。git add -p 命令甚至可以对一个文件内的修改进行有选择性的添加。 一个修改后的文件被登记到提交暂存区后，可以继续修改，继续修改的内容不会被提交，除非再对此文件再执行一次 git add 命令。即一个修改文件可以拥有两个版本，在提交暂存区中有一个版本，在工作区中有另外一个版本。 执行 git commit命令提交，无须设定什么变更列表，直接将登记在暂存区中的内容提交。Git支持对提交的撤销，而且可以撤销任意多次。 工作进度保存如果工作区的修改尚未完成时，忽然有一个紧急的任务，需要从一个干净的工作区开始新的工作，或者要切换到别的分支进行工作，那么如果保存当前尚未完成的工作进度呢？1git stash 在切换到新的工作分支之前，执行 git stash 保存工作进度，工作区会变的非常干净，然后就可以切换到新的分支。12git stash git checkout &lt;new_branch&gt; 新的工作分支修改完毕后，再切换回当前分支，调用 git stash pop 命令则可恢复之前保存的工作进度。12git checkout &lt;orignal_branch&gt;git stash pop 更好的差异比较Git对差异比较进行了扩展，支持对二进制文件的差异比较，这是对GNU的 diff 和 patch 命令的重要补充。还有Git的差异比较除了支持基于行的差异比较外，还支持在一行内逐字比较的方式，当向 git diff 命令传递 --word-diff 参数时，就会进行逐字比较。在上面介绍了工作区的文件修改可能会有两个不同的版本，一个是在提交暂存区，一个是在工作区。因此在执行 git diff 命令时会遇到令Git新手费解的现象。 修改后的文件在执行 git diff 命令时会看到修改造成的差异。 修改后的文件通过 git add 命令提交到暂存区，再执行 git diff 命令会看不到该文件的差异。 执行 git diff --cached 命令才可以看到添加到暂存区中的文件所做出的修改。 无处不在的分页器分页器默认使用 less命令（less -FRSX）进行分页。下面是在分页器中常用的热键： 字母q：退出分页器； 字母h：显示分页器帮助； 按空格下翻一页，按字母b上翻一页； 字母d和u：分别代表向下翻动半页和向上翻动半页； 字母j和k：分别代表向上翻一行和向下翻一行； 如果行太长被截断，可以用左箭头和右箭头使得窗口内容左右滚动； 输入/pattern：向下寻找和pattern匹配的内容； 输入?pattern：向上寻找和pattern匹配的内容； 字母n或N：代表向前或向后继续寻找； 字母g：跳到第一行； 字母G：跳到最后一行； 输入数字再加字母g：则跳转到对应的行； 输入!：可以执行Shell命令。 对于默认未提供分页器的Git命令，例如 git status 命令，可通过下面任一方法启用分页器： 在 git 和子命令(如：status)之间插入参数-p或--paginate，为命令启用内建分页器。如：1git -p status -设置Git变量，设置完毕后运行相应的命令，将启用内建分页器。1git config --global pager.status true Git 命令的分页器支持带颜色的字符输出，对于太长的行则采用截断方式处理（可用左右方向键滚动）。如果不习惯分页器的长行截断模式而希望采用自动折行模式，可通过下面任一方法进行设置： 通过设置LESS环境变量来实现。1export LESS=FRX -或者通过定义Git配置变量来改变分页器的默认行为。1git config --global core.pager &apos;less -+$LESS -FRX&apos;]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IDEA使用FindBugs插件]]></title>
    <url>%2F2019%2F06%2F04%2FIDEA%E4%BD%BF%E7%94%A8FindBugs%E6%8F%92%E4%BB%B6.html</url>
    <content type="text"><![CDATA[下载安装在Idea中，打开”File”–&gt;”Settings”，或者使用快捷键”Ctrl+Alt+S”打开设置窗口： 在设置窗口找到 plugins 标签页，然后点击下方的 Browse Repositories ： 在新打开的Browse Repositories窗口搜索findbugs，然后点击Install进行安装，因为我已经安装过了，所以不再显示install按钮： 使用FindBugs 简单说明： 鼠标移动到右边的所有图标，看看每个图标都是什么意思。大概说一下：第一竖列的红色图标是分析当前的这个文件。下面是分析是某一个类，鼠标所在的那个类。再往下是某个包，某个模块，整个项目，所有修改过的文件，等等。第二竖列则是控制分析结果的展示情况。 下面就整个实际找到的代码的问题，单独分析某个service文件，看代码里面的问题。如下图所示： Find Bugs的意思是说代码里面把SimpleDateFormat声明为静态属性，但是SimpleDateFormat是线程不安全的。在多线程使用的时候，可能就会有意想不到的问题。所以就找到个问题啦。根据提示进行修改，如下： 在上图中看到代码里有很多黄色提示，强迫症的人看着很不爽，那怎么把代码里面这些黄色的提示给关掉呢？ 点这个 × 就以啦，代码就恢复成原来的样子啦。 常见的错误信息 Bad practice 代码中的一些坏习惯 Class names should start with an upper case letter 主要包括类名的命名，以大写字母开头。 Method names should start with a lower case letter 方法名以小写字母开头。 Field names should start with a lower case letter 字段名以小写字母开头。 equals()method does not check for null argument equals()方法应该检查非空。 Class defines equals() and uses Object.hashCode() 一个类覆写了equals方法，没有覆写hashCode方法，使用了Object对象的hashCode方法。 Method ignores exceptional return value 方法忽略返回值的异常信息。 Equals method should not assume anything about the type of its argument equals(Object o)方法不能对参数o的类型做任何的假设。比较此对象与指定的对象。当且仅当该参数不为 null，并且是表示与此对象相同的类型的对象时，结果才为 true。 Comparison of String objects using == or != 用==或者！=去比较String类型的对象。 Method might ignore exception 方法可能忽略异常。 Method invokes System.exit() 在方法中调用System.exit(…)语句，考虑用RuntimeException来代替。 Method ignores result of InputStream.read() InputStream.read方法忽略返回的多个字符，如果对结果没有检查就没法正确处理用户读取少量字符请求的情况。 Dodgy code 糟糕的代码 Switch statement found where default case is missing Switch没有默认情况下执行的case语句。 Switch statement found where one case falls through to the next case Switch语句中一个分支执行后又执行了下一个分支。通常case后面要跟break 或者return语句来跳出。 Dead store to local variable 该指令为局部变量赋值，但在其后的没有对她做任何使用。通常，这表明一个错误，因为值从未使用过。 Write to static field from instance method 在实例方法写入静态字段。 Redundant nullcheck of value known to be non-null 方法中对不为空的值进行为空的判断。 Method uses the same code for two branches 此方法使用相同的代码，以实现两个有条件的分支。检查以确保这是不是一个编码错误。 Exception is caught when Exception is not thrown 在try/catch块中捕获异常，但是异常没有在try语句中抛出而RuntimeException又没有明确的被捕获。 Integral division result cast to double or float 整形数除法强制转换为double或者float类型。 Possible null pointer dereference due to return value of called method 方法的返回值没有进行是否为空的检查就重新赋值，这样可能会出现空指针异常。 Useless object created 对象创建了并没有用。 Unread public/protected field 没有用到的字段。 Internationalization 关于代码国际化相关方面的 Consider using Locale parameterized version of invoked method使用平台默认的编码格式对字符串进行大小写转换，这可能导致国际字符的转换不当。使用以下方式对字符进行转换 Performance 关于代码性能相关方面的 Boxing/unboxing to parse a primitive 类型转换 比如字符串转换成int 应该使用Integer.parseInt(“”) 代替Integer.valueOf(“”) Method concatenates string using + in aloop每次循环里的字符串+连接，都会新产生一个string对象，在java中，新建一个对象的代价是很昂贵的，特别是在循环语句中，效率较低解决办法：使用StringBuffer或者StringBuilder重用对象。 Private method is never called 私有方法没有被调用 Explicit garbage collection;extremely dubious except in benchmarking code在代码中显式的调用垃圾回收命名，这样做并不能起作用。在过去，有人在关闭操作或者finalize方法中调用垃圾回收方法导致了很多的性能浪费。这样大规模回收对象时会造成处理器运行缓慢。 Unread field:should this field be static? 没有用到的static 字段 should be a static inner class 此内部类应该使用static修饰 Experimental Method may fail to clean up stream or resource on checked exception这种方法可能无法清除（关闭，处置）一个流，数据库对象，或其他资源需要一个明确的清理行动解决方法：流的关闭都写在finally里面 Malicious code vulnerability 关于恶意破坏代码相关方面的 May expose internal representation by incorporating reference to mutable object此代码把外部可变对象引用存储到对象的内部表示。如果实例受到不信任的代码的访问和没有检查的变化危及对象和重要属性的安全。存储一个对象的副本，在很多情况下是更好的办法。 Field isn’t final but should be 此字段前应该加final Field isn’t final and can’t be protected from malicious code 此字段前应该加final Field should be package protected一个静态字段是可以被恶意代码或其他的包访问修改。可以把这种类型的字段声明为final类型的以防止这种错误。 Multithreaded correctness 关于多线程代码正确性相关方面的 Static DateFormat DateFormat 在多线程中本身就是不安全的，如果在线程范围中共享一个DateFormat的实例而不使用一个同步的方法在应用中就会出现一些奇怪的行为。 Call to static DateFormat DateFormats多线程使用本事就是不安全的,改进方法：需要创建多实例或线程同步 Correctness 关于代码正确性相关方面的 Nullcheck of value previously dereferenced 此代码之前废弃null值检查。解决办法 进行null检查 Possible null pointer dereference 可能为null Null pointer dereference 对象赋为null值后 没有被重新赋值 Possible null pointer dereference in method on exception path 在异常null值处理分支调用的方法上，可能存在对象去除引用操作 value is null and guaranteed to be dereferenced on exception path exception分支上，存在引用一个null对象的方法，引发空指针异常。 Self comparison of value with itself 方法中对一个局部变量自身进行比较运算，并可说明错误或逻辑错误。请确保您是比较正确的事情。 An apparent infinite recursive loop 明显的无限迭代循环,将导致堆栈溢出.]]></content>
      <categories>
        <category>IDEA</category>
        <category>插件</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git:cherry-pick、revert、reset介绍]]></title>
    <url>%2F2019%2F06%2F03%2FGit-cherry-pick%E3%80%81revert%E3%80%81reset%E4%BB%8B%E7%BB%8D.html</url>
    <content type="text"><![CDATA[gti checkout – filename git checkout – filename 可以把工作区的某个文件的修改撤回到上一次add或者commit的状态，不过filename不能省略.可以使用 git checkout – 不加文件名来查看当前工作区修改了哪些文件，这个只是针对工作区的问题； git reset head filename git reset HEAD filename 可以把add到缓存区的文件回退到工作区，也就是把add filename这个过程给回退了，这并不会修改文件的内容，只是把缓存区的某个文件变成和HEAD这个当前版本相同，也就是说如果你多次add，这会回退到第一次add的过程，和上面的操作一样，也可以不带上文件名来查看哪些文件被添加到了缓存区； git reset –hard head^ git reset –hard HEAD~【1，2，3，4，5…】这个是大家熟悉的本地版本的回退 某分支上的修改迁移到另一分支 比如我们在分支a上开发新功能，此时有个紧急bug需要修改，然后切换到了分支b。bug修复完之后忘了切回之前的分支a，而是在分支b上面继续编写本应该是分支a的内容，这样b分支存在了一部分a分支的代码，这个时候需要把这段代码迁移到a分支上，两个思路： 1）如果还没有在b分支上commit的话(add的话没影响，在迁移后，就不会再当前分支的缓存中)。直接切到a分支，此时会提示有没有被commit的代码，切到a分支后，就可以commit这段没有被commit的代码，也就是在b分支上编写的代码正确的被迁移到了a分支。 2）如果已经commit了，可以这么来：git log找到你commit的分支号，然后直接切换到a分支，执行git cherry-pick commit-id，这个commit-id就是那个b分支错误commit的id，这个命令就是把这个commit的修改拿到当前分支来，很简单粗暴而有效。再切换到b分支，使用git revert commit-id把这个错误的分支号移除。 revert reset cherry-pick git revert当我们的某个分支中有了很多版本之后，形成了一条版本链，如果想去除这个线路中的某一版本，但是保留版本链中的其他所有修改，生成一个新的版本链，版本链中的HEAD就是revert最新生成的版本。所以revert是会生成新版本的指令。可以这么想，链就像一个链条，是一环扣一环的，其中的一环就是一个版本，现在想去这个链条中的某一环（某个版本），执行git revert HEAD~2，这个HEAD~2就是这个要删除的版本（链条中的一环），就会把这个环解开剔除，把和这个剔除的环（版本）相邻的环连在一起，形成了一个新的链条（少了一环），然后在链条的最后面添加一个新的没有任何修改的环（revert HEAD~2 这个新的commit版本）整个过程就像剔除了中间某一个版本，最后加上了一个没有任何修改的新的版本。需要注意的是，不要随意删除中间的版本，因为可能会存在依赖，最好是revert最新的版本，风险会小很多。 git resetgit reset [--hard|soft|mixed|merge|keep] [&lt;commit&gt;或HEAD]是比较常用的指令，其中比较重要的是mode，也就是 –hard、–soft、–mixed。。。比较常见的是–hard和–soft； –hard是指完全重设，会把回退到某版本之后的修改全部删除， –soft这是个回退解体，让版本库回退到某个版本，这个版本之后的修改全部存在缓存区，这个时候在commit的话，又会把会退的部分重新加载到最新版本中； git cherry-pickgit cherry-pick &lt;commit id&gt;用于把另一个本地分支的commit修改应用到当前分支，也是解决之前遇到问题的关键，可以直接把其他的分支上的修改或者是某一个版本直接引过来，可能会存在冲突，这个时候就和正常的冲突一样的解决就好了。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git安装]]></title>
    <url>%2F2019%2F06%2F03%2FGit%E5%AE%89%E8%A3%85.html</url>
    <content type="text"><![CDATA[最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。后来有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。 要使用Git，第一步当然是安装Git了。根据你使用的操作系统如下： Linux上安装Git首先，你可以试着输入git，看看系统有没有安装Git：123$ gitThe program &apos;git&apos; is currently not installed. You can install it by typing:sudo apt-get install git 像上面的命令，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。 如果你用的是Debian或Ubuntu Linux，通过 sudo apt-get install git 就可以直接完成Git的安装，非常简单。 老一点的Debian或Ubuntu Linux，要把命令改为sudo apt-get install git-core，因为以前有个软件也叫GIT（GNU Interactive Tools），结果Git就只能叫git-core了。由于Git名气实在太大，后来就把GNU Interactive Tools改成gnuit，git-core正式改为git。 如果是其他Linux版本，可以直接通过源码安装。先从Git官网下载源码，然后解压，依次输入：./config，make，sudo make install这几个命令安装就好了。 Mac OS X上安装Git 有两种安装Git的方法: 一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档。 第二种方法更简单，直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。 Xcode是Apple官方IDE，功能非常强大，是开发Mac和iOS App的必选装备，而且是免费的！ Windows上安装Git在Windows上使用Git，可以从Git官网直接下载安装程序，然后按默认选项安装即可。 安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！ 安装完成后，还需要最后一步设置，在命令行输入：12$ git config --global user.name &quot;Your Name&quot;$ git config --global user.email &quot;email@example.com&quot; 注意git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 Git可以安装在哪些操作系统上？ Linux macOS Solaris Windows Raspberry Pi Submit]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git合并指定文件或Commits到另一分支]]></title>
    <url>%2F2019%2F05%2F31%2FGit%E5%90%88%E5%B9%B6%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E6%88%96Commits%E5%88%B0%E5%8F%A6%E4%B8%80%E5%88%86%E6%94%AF.html</url>
    <content type="text"><![CDATA[刚使用git进行版本管理的时候，由于成员间的代码有的需要上线，有的不需要上线，如果直接merge，经常 会把别人不需要上线的代码合并的master，导致问题从生。所以，最稳妥的是只合并你需要的那些commits，不需要的commits就不合并进去。那么如何从一个分支合并特定的文件或者Commits到另一个分支这个问题急待解。 合并某个分支上的单个commit首先，用git log或sourcetree工具查看你想选择哪些commits进行合并，例如： 比如dev-w 分支上的commit 2aeefdacad6ed1586a1e035fb8860f11533db23c 非常重要，它含有一个紧急bug的修复或是其他内容。无论什么原因，你现在只需要将 2aeefdacad6ed1586a1e035fb8860f11533db23c 合并到master，而不合并dev-w上的其他commits，所以我们用git cherry-pick命令来做：123git checkout master git cherry-pick 2aeefdacad6ed1586a1e035fb8860f11533db23c 这样 2aeefdacad6ed1586a1e035fb8860f11533db23c 就被合并到master分支，并在master中添加了commit（作为一个新的commit）。cherry-pick 和merge比较类似，如果git不能合并代码改动（比如遇到合并冲突），git需要你自己来解决冲突并手动添加commit。 这里git cherry-pick每次合并过来会显示文件冲突(其实并没有代码冲突部分，只需手动解决既可) 合并某个分支上的一系列commits在一些特定情况下，合并单个commit并不够，你需要合并一系列相连的commits。这种情况下就不要使用cherry-pick了，rebase 更适合。假设你需要合并dev-w分支的commit 76cada ~62ecb3 到master分支。 首先需要基于dev-w创建一个新的分支，并指明新分支的最后一个commit：12git checkout dev-w git checkout -b newbranch 62ecb3 然后，rebase这个新分支的commit到master（–ontomaster）。76cada^ 指明你想从哪个特定的commit开始。1git rebase --ontomaster 76cada^ 得到的结果就是dev-w分支的commit 76cada ~ 62ecb3 都被合并到了master分支。 另外如果只想将dev-w分支的某个文件Test.java合并到master分支上。12git checkout dev-wgit checkout --patch master Test.java 第一个命令： 切换到dev-w分支；第二个命令：合并master分支上Test.java文件到dev-w分支上，将master分支上 Test.java 文件追加补丁到dev-w分支上 Test.java文件。你可以接受或者拒绝补丁内容。 如果只是简单的将dev-w分支的文件Test.java copy到master分支上； 12git checkout mastergit checkout dev-w Test.java 分支test上有一个文件A，你在test1分支上， 此时如果想用test分支上的A文件替换test1分支上的文件的话，可以使用git checkout test1, 然后git checkout test – A 在feature分支commit 切换至release分支 从feature分支检出相应文件12345678#branch featuregit commit -a -m &quot;msg&quot;git checkout release#branch releasegit checkout feature file-01git checkout feature file-x...git commit -a -m &quot;msg&quot;]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL中的函数总结]]></title>
    <url>%2F2019%2F05%2F22%2FMySQL%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[CONCAT()函数CONCAT（）函数用于将多个字符串连接成一个字符串。使用数据表sys_user作为示例，sql如下：SELECT user_id as id,zwxm as name FROM sys_user LIMIT 1; 返回结果如下： 12345+----+--------+| id | name |+----+--------+| 1 | 张三 |+----+--------+ 1、语法及使用特点：CONCAT(str1,str2,…)返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL。可以有一个或多个参数。 2、使用示例：SELECT CONCAT(user_id, ‘，’, zwxm) AS con FROM sys_user LIMIT 1;返回结果如下：12345+----------+| con |+----------+| 1,张三 |+----------+ SELECT CONCAT(‘My’, NULL, ‘QL’); 返回结果如下：12345+--------------------------+| CONCAT(&apos;My&apos;, NULL, &apos;QL&apos;) |+--------------------------+| NULL |+--------------------------+ CONCAT_WS()函数使用语法为：· CONCAT_WS(separator,str1,str2,…) ·CONCAT_WS() 代表 CONCAT With Separator ，是CONCAT()的特殊形式。第一个参数是其它参数的分隔符。分隔符的位置放在要连接的两个字符串之间。分隔符可以是一个字符串，也可以是其它参数。如果分隔符为 NULL，则结果为 NULL。函数会忽略任何分隔符参数后的 NULL 值。但是CONCAT_WS()不会忽略任何空字符串。 (然而会忽略所有的 NULL）。 示例1：SELECT CONCAT_WS(&#39;_&#39;,user_id,zwxm) AS con_ws FROM sys_user LIMIT 1; 返回结果：12345+----------+| con_ws |+----------+| 1_张三 |+----------+ 示例2：SELECT CONCAT_WS(&#39;,&#39;,&#39;First name&#39;,NULL,&#39;Last Name&#39;); 返回结果：12345+----------------------------------------------+| CONCAT_WS(&apos;,&apos;,&apos;First name&apos;,NULL,&apos;Last Name&apos;) |+----------------------------------------------+| First name,Last Name |+----------------------------------------------+ GROUP_CONCAT()函数语法如下： group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’]) 基本查询： 123456789101112mysql&gt; select * from test; +------+------+ | id| name | +------+------+ |1 | 10 | |1 | 20 | |1 | 20 | |2 | 20 | |3 | 200 | |3 | 500 | +------+------+ 6 rows in set (0.00 sec) 以id分组，把name字段的值打印在一行，逗号分隔(默认) 123456789mysql&gt; select id,group_concat(name) from test group by id; +------+--------------------+ | id | group_concat(name) | +------+--------------------+ |1 | 10,20,20 | |2 | 20 | |3 | 200,500 | +------+--------------------+ 3 rows in set (0.00 sec) 以id分组，把name字段的值打印在一行，分号分隔 123456789mysql&gt; select id,group_concat(name separator &apos;;&apos;) from test group by id; +------+----------------------------------+ | id | group_concat(name separator &apos;;&apos;) | +------+----------------------------------+ |1 | 10;20;20 | |2 | 20 | |3 | 200;500 | +------+----------------------------------+ 3 rows in set (0.00 sec) 以id分组，把去冗余的name字段的值打印在一行，逗号分隔 123456789mysql&gt; select id,group_concat(distinct name) from test group by id; +------+-----------------------------+ | id | group_concat(distinct name) | +------+-----------------------------+ |1 | 10,20 | |2 | 20 | |3 | 200,500 | +------+-----------------------------+ 3 rows in set (0.00 sec) 以id分组，把name字段的值打印在一行，逗号分隔，以name排倒序 123456789mysql&gt; select id,group_concat(name order by name desc) from test group by id; +------+---------------------------------------+ | id | group_concat(name order by name desc) | +------+---------------------------------------+ |1 | 20,20,10 | |2 | 20 | |3 | 500,200 | +------+---------------------------------------+ 3 rows in set (0.00 sec) 使用group_concat_max_len系统变量，你可以设置允许的最大长度。 程序中进行这项操作的语法如下，其中 val 是一个无符号整数：SET [SESSION | GLOBAL] group_concat_max_len = val;若已经设置了最大长度， 则结果被截至这个最大长度。将环境变量group_concat_max_len 增大。默认是1024.我就设置了session级的环境变量将其变为2048（不够用再加大）]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java多线程-“基础”03之-Thread中start()和run()的区别]]></title>
    <url>%2F2019%2F05%2F22%2FJava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E2%80%9C%E5%9F%BA%E7%A1%80%E2%80%9D03%E4%B9%8B-Thread%E4%B8%ADstart-%E5%92%8Crun-%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content type="text"><![CDATA[start()和run()方法的区别start(): 它的作用是启动一个新线程，新线程会执行相应的run()方法。start()不能被重复调用。 run(): run()就和普通的成员方法一样，可以被重复调用。单独调用run()的话，会在当前线程中执行run()，而并不会启动新线程！ 下面以代码来进行说明。 123456class MyThread extends Thread&#123; public void run()&#123; ... &#125; &#125;;MyThread mythread = new MyThread(); mythread.start()会启动一个新线程，并在新线程中运行run()方法。而mythread.run()则会直接在当前线程中运行run()方法，并不会启动一个新线程来运行run()。 start()和run()方法示例下面，通过一个简单示例演示它们之间的区别。源码如下：12345678910111213141516171819202122class TestThread extends Thread &#123; public TestThread(String name) &#123; super(name); &#125; @Override public void run() &#123; System.out.println(Thread.currentThread().getName() + &quot; is running&quot;); &#125;&#125;;public class ThreadMethodDemo &#123; public static void main(String[] args) &#123; Thread mythread = new TestThread(&quot;testThread&quot;); System.out.println(Thread.currentThread().getName() + &quot; call testThread.run()&quot;); mythread.run(); System.out.println(Thread.currentThread().getName() + &quot; call testThread.start()&quot;); mythread.start(); &#125;&#125; 运行结果：1234main call testThread.run()main is runningmain call testThread.start()testThread is running 结果说明：1) Thread.currentThread().getName()是用于获取“当前线程”的名字。当前线程是指正在cpu中调度执行的线程。2) testThread.run()是在“主线程main”中调用的，该run()方法直接运行在“主线程main”上。3) testThread.start()会启动“线程testThread”，“线程testThread”启动之后，会调用run()方法；此时的run()方法是运行在“线程testThread”上。 start()和run()源码说明（基于JDK1.8.0_171） Thread.java中start()方法源码如下： 12345678910111213141516171819202122232425262728public synchronized void start() &#123; /** * 如果线程不是&quot;新建状态&quot;，则抛出异常 * 状态值0 对应&quot;新建&quot; */ if (threadStatus != 0) throw new IllegalThreadStateException(); /** 将线程添加到ThreadGroup中 */ group.add(this); boolean started = false; try &#123; /** 通过start0()启动线程 */ start0(); /** 设置started标记 */ started = true; &#125; finally &#123; try &#123; if (!started) &#123; group.threadStartFailed(this); &#125; &#125; catch (Throwable ignore) &#123; /* do nothing. If start0 threw a Throwable then it will be passed up the call stack */ &#125; &#125;&#125; 说明： start()实际上是通过本地方法start0()启动线程的。而start0()会新运行一个线程，新线程会调用run()方法。 1private native void start0(); Thread.java中run()方法源码如下：12345public void run() &#123; if (target != null) &#123; target.run(); &#125;&#125; 说明： target是一个Runnable对象。run()就是直接调用Thread线程的Runnable成员的run()方法，并不会新建一个线程。]]></content>
      <categories>
        <category>Java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java多线程-“基础”02之 多线程实现方式]]></title>
    <url>%2F2019%2F05%2F22%2FJava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E2%80%9C%E5%9F%BA%E7%A1%80%E2%80%9D02%E4%B9%8B-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F.html</url>
    <content type="text"><![CDATA[实现多线程的几种方式 继承Thread类 实现Runnable接口 通过Callable和Future 通过线程池 Thread和Runnable简介RunnableRunnable是一个接口库，该接口只包含了一个run()方法，定义如下：123public interface Runnable &#123; public abstract void run();&#125; Runnable的作用，实现多线程。我们可以定义一个类A实现Runnable接口；然后，通过new Thread(new A())等方式新建线程。 ThreadThread 是一个类。Thread本身就实现了Runnable接口。它的声明如下：1public class Thread implements Runnable &#123;&#125; Thread和Runnable的异同点Thread 和 Runnable 的相同点：都是“多线程的实现方式”。Thread 和 Runnable 的不同点：Thread 是类，而Runnable是接口；Thread本身是实现了Runnable接口的类。我们知道“一个类只能有一个父类，但是却能实现多个接口”，因此Runnable具有更好的扩展性。此外，Runnable还可以用于“资源的共享”。即，多个线程都是基于某一个Runnable对象建立的，它们会共享Runnable对象上的资源。通常，建议通过“Runnable”实现多线程！ Thread和Runnable的多线程示例Thread的多线程示例123456789101112131415161718192021222324public class ThreadTest &#123; public static void main(String[] args) &#123; // 启动3个线程t1,t2,t3；每个线程各卖10张票！ MyThread t1 = new MyThread(); MyThread t2 = new MyThread(); MyThread t3 = new MyThread(); t1.start(); t2.start(); t3.start(); &#125;&#125;class MyThread extends Thread &#123; private int ticket = 10; @Override public void run() &#123; for (int i = 0; i &lt; 20; i++) &#123; if (this.ticket &gt; 0) &#123; System.out.println(this.getName() + &quot; 卖票：ticket&quot; + this.ticket--); &#125; &#125; &#125;&#125;; 运行结果：123456789101112131415161718192021222324252627282930Thread-2 卖票：ticket10Thread-1 卖票：ticket10Thread-0 卖票：ticket10Thread-1 卖票：ticket9Thread-2 卖票：ticket9Thread-1 卖票：ticket8Thread-0 卖票：ticket9Thread-1 卖票：ticket7Thread-2 卖票：ticket8Thread-1 卖票：ticket6Thread-0 卖票：ticket8Thread-1 卖票：ticket5Thread-2 卖票：ticket7Thread-1 卖票：ticket4Thread-0 卖票：ticket7Thread-1 卖票：ticket3Thread-2 卖票：ticket6Thread-1 卖票：ticket2Thread-0 卖票：ticket6Thread-1 卖票：ticket1Thread-2 卖票：ticket5Thread-0 卖票：ticket5Thread-2 卖票：ticket4Thread-0 卖票：ticket4Thread-2 卖票：ticket3Thread-0 卖票：ticket3Thread-2 卖票：ticket2Thread-0 卖票：ticket2Thread-2 卖票：ticket1Thread-0 卖票：ticket1 结果说明：(01) MyThread继承于Thread，它是自定义个线程。每个MyThread都会卖出10张票。(02) 主线程main创建并启动3个MyThread子线程。每个子线程都各自卖出了10张票。 Runnable的多线程示例1234567891011121314151617181920212223242526class MyThread2 implements Runnable &#123; private int ticket = 10; @Override public void run() &#123; for (int i = 0; i &lt; 20; i++) &#123; if (this.ticket &gt; 0) &#123; System.out.println(Thread.currentThread().getName() + &quot; 卖票：ticket&quot; + this.ticket--); &#125; &#125; &#125;&#125;;public class RunnableTest &#123; public static void main(String[] args) &#123; MyThread2 mt = new MyThread2(); // 启动3个线程t1,t2,t3(它们共用一个Runnable对象)，这3个线程一共卖10张票！ Thread t1 = new Thread(mt); Thread t2 = new Thread(mt); Thread t3 = new Thread(mt); t1.start(); t2.start(); t3.start(); &#125;&#125; 运行结果：12345678910Thread-0 卖票：ticket10Thread-0 卖票：ticket7Thread-0 卖票：ticket6Thread-0 卖票：ticket5Thread-2 卖票：ticket8Thread-1 卖票：ticket9Thread-1 卖票：ticket2Thread-1 卖票：ticket1Thread-2 卖票：ticket3Thread-0 卖票：ticket4 结果说明：(01) 和上面“MyThread继承于Thread”不同；这里的MyThread实现了Thread接口。(02) 主线程main创建并启动3个子线程，而且这3个子线程都是基于“mt这个Runnable对象”而创建的。运行结果是这3个子线程一共卖出了10张票。这说明它们是共享了MyThread接口的。]]></content>
      <categories>
        <category>Java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java多线程-“基础”01之 基本概念]]></title>
    <url>%2F2019%2F05%2F22%2FJava%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E2%80%9C%E5%9F%BA%E7%A1%80%E2%80%9D01%E4%B9%8B%20%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5.html</url>
    <content type="text"><![CDATA[线程状态图 线程状态解析 新建状态(New):线程对象被创建后，就进入了新建状态。例如，Thread thread = new Thread()。 就绪状态(Runnable):也被称为“可执行状态”，处于就绪状态的线程，随时可能被CPU调度执行。 调用线程的start()方法，此线程进入就绪状态。 当前线程sleep()方法结束，其他线程join()结束，等待用户输入完毕，某个线程拿到对象锁，这些线程也将进入就绪状态。 当前线程时间片用完了，调用当前线程的yield()方法，当前线程进入就绪状态。 锁池里的线程拿到对象锁后，进入就绪状态。 运行状态(Running):线程获取CPU权限进行执行。需要注意的是，线程只能从就绪状态进入到运行状态。 阻塞状态(Blocked):阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种： 等待阻塞 – 通过调用线程的wait()方法，让线程等待某工作的完成。 同步阻塞 – 线程在获取synchronized同步锁失败(因为锁被其它线程所占用)，它会进入同步阻塞状态。 其他阻塞 – 通过调用线程的sleep()或join()或发出了I/O请求时，线程会进入到阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。 死亡状态(Dead):线程执行完了或者因异常退出了run()方法，该线程结束生命周期。线程一旦终止了，就不能复生。在一个终止的线程上调用start()方法，会抛出java.lang.IllegalThreadStateException异常。 说明这5种状态涉及到的内容包括Object类, Thread和synchronized关键字。Object类，定义了wait(), notify(), notifyAll()等休眠/唤醒函数。Thread类，定义了一些列的线程操作函数。例如，sleep()休眠函数, interrupt()中断函数, getName()获取线程名称等。synchronized，是关键字；它区分为synchronized代码块和synchronized方法。synchronized的作用是让线程获取对象的同步锁。 几个方法的比较 Thread.sleep(long millis)，一定是当前线程调用此方法，当前线程进入TIMED_WAITING状态，但不释放对象锁，millis后线程自动苏醒进入就绪状态。作用：给其它线程执行机会的最佳方式。 Thread.yield()，一定是当前线程调用此方法，当前线程放弃获取的CPU时间片，但不释放锁资源，由运行状态变为就绪状态，让OS再次选择线程。作用：让相同优先级的线程轮流执行，但并不保证一定会轮流执行。实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。Thread.yield()不会导致阻塞。该方法与sleep()类似，只是不能由用户指定暂停多长时间。 t.join()/t.join(long millis)，当前线程里调用其它线程t的join方法，当前线程进入WAITING/TIMED_WAITING状态，当前线程不会释放已经持有的对象锁。线程t执行完毕或者millis时间到，当前线程进入就绪状态。 obj.wait()，当前线程调用对象的wait()方法，当前线程释放对象锁，进入等待队列。依靠notify()/notifyAll()唤醒或者wait(long timeout) timeout时间到自动唤醒。 obj.notify()唤醒在此对象监视器上等待的单个线程，选择是任意性的。notifyAll()唤醒在此对象监视器上等待的所有线程。]]></content>
      <categories>
        <category>Java</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL性能优化]]></title>
    <url>%2F2019%2F05%2F22%2FMySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html</url>
    <content type="text"><![CDATA[啦啦啦啦啦啦啦啦啦]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java面试题总结]]></title>
    <url>%2F2019%2F05%2F21%2FJava%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[Java里面所有的不变的属性需要用final修饰吗 答：没必要。你可以实现相同的功能通过以下操作：设为非final的private 变量，且只有在构造函数中才能修改。不设set方法，如果是一个可变对象，不要泄露任何指向这个对象的引用。 设置一个引用变量为final 只能确保这个变量不会被赋予一个不同的引用，但是你仍然可以改变引用变量的属性值。 String的subString()实现原理 答：substring取原来string的一部分创建一个新的对象。这个问题主要想问substring可能导致的内存泄露风险。 直到Java1.7， substring 拥有原来的字符数组的引用，这意味着即使是五字符这么小的字符串，也可能会导致一个1GB字符数组无法被垃圾回收，因为有一个强引用。 这个问题在Java1.7中已经被修复，原来的字符数组不会被引用，但是会导致创建substring耗时会有点长，以前时间复杂度是 O(1), Java 7之后时间复杂度是 O(n)。 Java中如何处理写存储过程或者读存储过程时遇到的错误 答： 一个存储过程应该在操作错误时返回错误码，但是如果存储过程本身出问题，捕获 SQLException 是唯一选择。 工厂模式和抽象工厂模式有什么区别 答：抽象工场模式提供一个多层级的抽象。考虑不同的工厂继承自同一个抽象工厂，代表基于工厂的不同对象结构的创建，例如， AutomobileFactory,UserFactory,RoleFactory等都继承自 AbstractFactory。每一个独立的工厂代表那种类型物体的创造器。 下面是一个工厂模式和抽象工厂模式的UML图： 什么时候重写 hashCode()和 equals()方法 答：当需要通过业务逻辑校验两个对象是否相等，而不是通过两个对象是否执行同一地址。例如两个员工对象在 emp_id 相等的时候相等，即使它们是通过不同的代码创建出来的两个不同对象。 另外，如果你使用一个对象作为 HashMap的key，你必须重写这两个方法。 作为java equals-hashcode约束的一部分，当你重写equals的时候，必须重写hashcode. 否则你不能在Set，Map这样的类里面使用，因为他们通过equals()方法来保证逻辑正确性。 双引号直接创建字符串和使用new()创建字符串有什么区别 答: 使用new()创建String对象，实例被创建在堆中, 不会被添加到String常量池中，当通过字面量创建时，会被放到堆中的永久区的String常量池中。 Stringstr = newString(“Test”) 不会把str放到String常量池中，需要调用String.intern()方法，才会把它放到String常量池中。 当使用String字面量创建String对象时，如通过String s = “Test”, java会自动放入String常量池中。 另外，如果把”Test”这样的String字面量传进去，也会创建另外一个对象:”Test” 在String常量池。 什么是不可变对象，如何写一个不可变类 答：不可变对象是指Java类的对象一单被创建，不能被修改。任何不可变对象对象的修改在创建时候就已经完成，例如，Java中String是不可变的。 大多数不可变类是final的, 这样可以防止因子类重写方法而导致不可变失效。 你也可以实现相同的功能通过让成员非final但是private，且除了构造方法任何其他方法无法修改。 另外，要确保没有暴露不可变对象的内部，尤其是它包含可变成员的时候。 同时，当你从客户端接收到可变的对象时，例如 java.util.Date, 使用clone() 方法 来获取一个独立的拷贝，防止恶意修改可变对象带来的风险。 相同的优化需要在返回一个可变成员时执行。返回另一个独立拷贝给客户端；不要返回可变对象的原始引用。]]></content>
      <categories>
        <category>面试题</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多线程面试题总结]]></title>
    <url>%2F2019%2F05%2F21%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[多线程的优缺点优点： 多线程技术使程序的响应速度更快。 当前没有进行处理的任务可以将处理器时间让给其它任务。 占用大量处理时间的任务可以定期将处理器时间让给其它任务。 可以随时停止任务。 可以分别设置各个任务的优先级以及优化性能。 缺点 等候使用共享资源时造成程序的运行速度变慢。 对线程进行管理要求额外的cpu开销。 可能出现线程死锁情况。即较长时间的等待或资源竞争以及死锁等症状。 start()方法和run()方法的区别start()方法： 用start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体代码执行完毕而直接继续执行下面的代码。 通过调用Thread类的start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到CPU时间片，就开始执行run()方法。 run()方法： run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条。 总结： 调用start方法方可启动线程。 run方法只是thread的一个普通方法调用，还是在主线程里执行。 把需要并行处理的代码放在run()方法中，start()方法启动线程将自动调用run()方法，这是由jvm的内存机制规定的。 run()方法必须是public访问权限，返回值类型为void。 Runnable接口和Callable接口的相同点和不同点相同点： Callable和Runnable都是接口； Callable和Runnable都一科应用于Executors； 不同点： Callable要实现call()方法，Runnable要实现run()方法； call()方法可以有返回值，run()方法不能有返回值； call(0方法可以抛出Checked Exception，run()方法不可以； Runnable接口在Jdk1.1中就有了，Callable在JDK1.5才有； voliate关键字的作用 多线程使用volatile关键字修饰的变量，保证了其在多线程之间的可见性，即每次读取到volatile变量，一定是最新的数据。 Java代码执行中，为了获取更好的性能JVM可能会对指令进行重排序，多线程下可能会出现一些意想不到的问题。使用volatile则会对禁止语义重排序，当然这也一定程度上降低了代码执行效率。 CyclicBarrier和CountDownLatch的区别 CountDownLatch CyclicBarrier 减计数方式 加计数方式 计数为0时唤醒所有等待的线程 计数达到指定值时唤醒所有等待的线程 计数为0无法重置 计数达到指定值时，计数置为0重新开始 调用countDown()方法计数减一，调用await()方法只进行阻塞，对计数没有影响 调用await()方法计数加1，若加1后的值不等于构造方法的值，则线程阻塞 不能重复利用 可重复使用 voliate和synchronized对比 volatile本质是在告诉jvm当前变量在寄存器中的值是不确定的,需要从主存中读取,synchronized则是锁定当前变量,只有当前线程可以访问该变量,其他线程被阻塞住。 volatile仅能使用在变量级别,synchronized则可以使用在变量,方法以及类级别。 volatile仅能实现变量的修改可见性,而synchronized则可以保证变量的修改可见性和原子性。 volatile不会造成线程的阻塞,而synchronized可能会造成线程的阻塞。 怎么唤醒一个阻塞的线程 如果线程是因为调用了wait()、sleep()或者join()方法而导致的阻塞，可以中断线程，并且通过抛出InterruptedException来唤醒它； 如果线程遇到了IO阻塞，无能为力，因为IO是操作系统实现的，Java代码并没有办法直接接触到操作系统。 sleep方法和wait方法的相同点和不同点相同点： 二者都可以让线程处于阻塞； 不同点： 首先sleep方法是Thread类中定义的方法，而wait方法是Object类中定义的方法。 sleep方法必须人为地为其指定休眠时间。wait方法既可以指定时间，也可以不指定时间。 sleep方法时间到了，线程处于临时阻塞状态或者运行状态。wait方法如果没有被设置时间，就必须要通过notify或者notifyAll来唤醒。 sleep方法不一定非要定义在同步中。wait方法必须定义在同步中。 当二者都定义在同步中时，线程执行到sleep，不会释放锁。线程执行到wait，会释放锁。 生产者和消费者模型的作用 通过平衡生产者的生产能力和消费者的消费能力来提升整个系统的运行效率，这是生产者消费者模型最重要的作用。 解耦，这是生产者消费者模型附带的作用，解耦意味着生产者和消费者之间的联系少，联系越少越可以独自发展而不需要收到相互的制约。 Executor.submit()和Executor.execute()的区别 前者返回一个 Future对象，可以用于找到工作线程的运行结果。 在异常处理上也不一样，在任务抛出异常时，如果是通过 execute()提交的，会抛出无需捕获的异常（如果你没有特殊处理，会打印错误栈道System.err）。如果是通过 submit()提交的，任何异常，无论是不是checked exception，都是返回的一部分，Future.get将把异常包在 ExecutionExeption中，向上层抛出。 ThreadLocal的作用 ThreadLocal用来解决多线程程序的并发问题。 ThreadLocal并不是一个Thread,而是Thread的局部变量,当使用ThreadLocal维护变量时,ThreadLocal为每个使用该变量的线程提供独立的变量副本,所以每个线程都可以独立地改变自己的副本,而不会影响其它线程所对应的副本。 从线程的角度看，目标变量就象是线程的本地变量，这也是类名中“Local”所要表达的意思。 线程局部变量并不是Java的新发明,Java没有提供在语言级支持(语法上),而是变相地通过ThreadLocal的类提供支持。 wait方法和notify/notifyAll方法在放弃对象监视器时的区别 wait()方法立即释放对象监视器； notify()/notifyAll()方法则会等待线程剩余代码执行完毕才会放弃对象监视器。 Lock和synchronized对比 Lock是一个接口，而synchronized是Java中的关键字，synchronized是内置的语言实现； synchronized在发生异常时，会自动释放线程占有的锁，因此不会导致死锁现象发生；而Lock在发生异常时，如果没有主动通过unLock()去释放锁，则很可能造成死锁现象，因此使用Lock时需要在finally块中释放锁； Lock可以让等待锁的线程响应中断，而synchronized却不行，使用synchronized时，等待的线程会一直等待下去，不能够响应中断； 通过Lock可以知道有没有成功获取锁，而synchronized却无法办到。 Lock可以提高多个线程进行读操作的效率。 在JDK1.5中，synchronized是性能低效的。因为这是一个重量级操作，它对性能最大的影响是阻塞式的实现，挂起线程和恢复线程的操作都需要转入内核态中完成，这些操作给系统的并发性带来了很大的压力。相比之下使用Java提供的Lock对象，性能更高一些。但是，JDK1.6，发生了变化，对synchronize加入了很多优化措施，有自适应自旋，锁消除，锁粗化，轻量级锁，偏向锁等等。导致在JDK1.6上synchronize的性能并不比Lock差。因此。提倡优先考虑使用synchronized来进行同步。 ReadWriteLock是什么 ReadWriteLock是一个读写锁接口，ReentrantReadWriteLock是ReadWriteLock接口的一个具体实现，实现了读写的分离，读锁是共享的，写锁是独占的，读和读之间不会互斥，读和写、写和读、写和写之间才会互斥，提升了读写的性能。 FutureTask是什么 FutureTask表示一个异步运算的任务。FutureTask里面可以传入一个Callable的具体实现类，可以对这个异步运算的任务的结果进行等待获取、判断是否已经完成、取消任务等操作。由于FutureTask也是Runnable接口的实现类，所以FutureTask也可以放入线程池中。 Java中用到的线程调度算法 抢占式。一个线程用完CPU之后，操作系统会根据线程优先级、线程饥饿情况等数据算出一个总的优先级并分配下一个时间片给某个线程执行。 乐观锁和悲观锁 乐观锁：对于并发间操作产生的线程安全问题持乐观状态，乐观锁认为竞争不总是会发生，因此它不需要持有锁，将比较-设置这两个动作作为一个原子操作尝试去修改内存中的变量，如果失败则表示发生冲突，那么就应该有相应的重试逻辑。悲观锁：对于并发间操作产生的线程安全问题持悲观状态，悲观锁认为竞争总是会发生，因此每次对某资源进行操作时，都会持有一个独占的锁，就像synchronized，直接对操作资源上了锁。 编写一个死锁程序死锁现象描述：线程A和线程B相互等待对方持有的锁导致程序无限死循环下去。 死锁的实现步骤： 两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁； 线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，100毫秒差不多了，然后接着获取lock2的对象锁。这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁; 线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的这样，线程1″睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。 代码实现：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152public class DeadLock &#123; public void run() &#123; TestDeadLock tl = new TestDeadLock(); new Thread(tl, &quot;线程A&quot;).start(); new Thread(tl, &quot;线程B&quot;).start(); &#125; class TestDeadLock implements Runnable &#123; private Object objA = new Object(); private Object objB = new Object(); private boolean flag = true; @Override public void run() &#123; if (flag) &#123; flag = false; synchronized (objA) &#123; System.out.println(Thread.currentThread().getName() + &quot;锁住资源A，等待资源B&quot;); try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (objB) &#123; System.out.println(Thread.currentThread().getName() + &quot;获得资源B&quot;); &#125; &#125; &#125; else &#123; flag = true; synchronized (objB) &#123; System.out.println(Thread.currentThread().getName() + &quot;锁住资源B，等待资源A&quot;); try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (objA) &#123; System.out.println(Thread.currentThread().getName() + &quot;获得资源A&quot;); &#125; &#125; &#125; &#125; &#125; public static void main(String[] args) &#123; new DeadLock().run(); &#125;&#125;输出结果是：线程A锁住资源A，等待资源B线程B锁住资源B，等待资源A Java中如何避免死锁 死锁发生是因为两个线程试图获取被对方持有的资源。但是要想发生这种情况，必须满足以下四个条件： 相互排斥 —— 至少一个进程必须处于非共享模式； 保持并等待 —— 必须有一个进程持有一个资源并等待另一个资源； 没有抢占 —— 资源不能被抢占； 循环等待 —— 存在进程集合。通过中断循环等待可以避免死锁。可以通过在代码中指定获取和释放锁的顺序来达到这一目的。 如果多个锁通过一致的顺序被获取和释放，不会有互相等待对方释放锁的情况。]]></content>
      <categories>
        <category>面试题</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
        <tag>面试题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 语法画流程图]]></title>
    <url>%2F2019%2F05%2F19%2FMarkdown-%E8%AF%AD%E6%B3%95%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE.html</url>
    <content type="text"><![CDATA[添加支持Hexo 默认是不支持流程图的 Markdown 语法的，需要添加支持：1npm install --save hexo-filter-flowchart 演示一个简单的流程图语法如下：12345678910···flow #由于渲染问题，请自行将 · 替换为 `st=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op··· 效果如下： 一个稍复杂的流程图语法如下：12345678910111213···flow #由于渲染问题，请自行将 · 替换为 `st=&gt;start: Start:&gt;http://www.google.com[blank]e=&gt;end:&gt;http://www.google.comop1=&gt;operation: My Operationsub1=&gt;subroutine: My Subroutinecond=&gt;condition: Yesor No?:&gt;http://www.google.comio=&gt;inputoutput: catch something...st-&gt;op1-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op1··· 效果如下： 语法详解Hexo中的流程图是依赖于flowchart.js 实现的。以上面那个稍复杂的流程图为例：1234567891011121314···flow #由于渲染问题，请自行将 · 替换为 `//定义部分st=&gt;start: Start:&gt;http://www.google.com[blank]e=&gt;end:&gt;http://www.google.comop1=&gt;operation: My Operationsub1=&gt;subroutine: My Subroutinecond=&gt;condition: Yes or No?:&gt;http://www.google.comio=&gt;inputoutput: catch something...//判断和位置控制st-&gt;op1-&gt;condcond(yes)-&gt;io-&gt;econd(no)-&gt;sub1(right)-&gt;op1··· 例如这一句： st=&gt;start: Start|past:&gt;http://www.google.com[blank] 其中，st是变量名，start是指操作模块名，冒号后面就是内容了。需要注意的是， 冒号后要加空格才能识别 操作模块语法 操作模块 说明 start 开始 end 结束 operation 普通操作块 condition 判断块 subroutine 子任务块 inputoutput 输入输出块 判断和位置控制`流程控制st-&gt;op1-&gt;e -&gt; 作为控制流程的操作符，就是指向下一步要操作的。 每一条都算是一条流程 你也可以断开写，怎么方便怎么来，如：下面两个是一样的。 分着写st-&gt;op1op1-&gt;e 合着写st-&gt;op1-&gt;e 判断cond(yes)-&gt;io-&gt;e #yes的时候到io，再到e 位置指定cond(no)-&gt;sub1(right)-&gt;op1 #no的时候到到 sub1，再从sub1的右侧到op1还可以这样 cond1(no,right)`st=>start: 开始 e=>end: 结束 op=>operation: 我的操作 cond=>condition: 确认？ st->op->cond cond(yes)->e cond(no)->op{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);st=>start: Start:>http://www.google.com[blank] e=>end:>http://www.google.com op1=>operation: My Operation sub1=>subroutine: My Subroutine cond=>condition: Yes or No?:>http://www.google.com io=>inputoutput: catch something... st->op1->cond cond(yes)->io->e cond(no)->sub1(right)->op1{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-1-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-1", options);]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法糖]]></title>
    <url>%2F2019%2F05%2F19%2FMarkdown%E8%AF%AD%E6%B3%95%E7%B3%96.html</url>
    <content type="text"><![CDATA[前言Markdown 是一种轻量级的标记语言，其用简单的标记语法便可达到排版的目的，可以使我们更加专注于内容的编写，而不需过多关注排版。本文主要整理了 Markdown 中的常用的标记语法，以便自己与他人以后查用。 优点 纯文本，所以兼容性极强，可以用所有文本编辑器打开。 让你专注于文字而不是排版。 格式转换方便，Markdown 的文本你可以轻松转换为 html、电子书等。 Markdown 的标记语法有极好的可读性。 缺点 需要记一些语法（当然，是很简单。五分钟学会）。 有些平台不支持Markdown编辑模式。 基本语法标题在想要设置为标题的文字前面加#来表示，一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：#与文字之间要有一个空格。 示例： 123456# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 字体星号或者下划线都可以，单是斜体，双是粗体，符号可以跨行，符号可加空格。 加粗要加粗的文字左右分别用两个*号包起来 斜体要倾斜的文字左右分别用一个*号包起来 斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来 删除线要加删除线的文字左右分别用两个~~号包起来 示例： 1234**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下： 引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…貌似可以一直加下去，但没神马卵用。 示例： 123&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 效果如下： 分割线三个或者三个以上的 - 或者 * 都可以。 示例： 1234-------******** 效果如下：可以看到，显示效果是一样的。 图片语法：1234![图片alt](图片地址 &apos;&apos;图片title&apos;&apos;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 示例：1![一脸懵逼](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1558179968948&amp;di=1c8a7432843fdaafb91e9cbffacd1557&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201608%2F02%2F20160802213915_x23St.thumb.700_0.jpeg &quot;一脸懵逼&quot;) 效果如下： 超链接语法：12[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加 示例：12[简书](http://jianshu.com)[百度](http://baidu.com) 效果如下：简书百度注：Markdown本身语法不支持链接在新页面中打开，如果想要在新页面中打开的话可以用html语言的a标签代替。1234&lt;a href=&quot;超链接地址&quot; target=&quot;_blank&quot;&gt;超链接名&lt;/a&gt;示例&lt;a href=&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot; target=&quot;_blank&quot;&gt;简书&lt;/a&gt; 索引超链接示例：12[百度][1][1]:http://www.baidu.com 效果如下：[百度][1][1]:http://www.baidu.com 自动链接语法：使用尖括号。 示例：12&lt;http://www.baidu.com&gt;&lt;1111111@qq.com&gt; 效果如下：http://www.baidu.com&#x31;&#49;&#49;&#x31;&#49;&#49;&#x31;&#x40;&#x71;&#x71;&#46;&#x63;&#111;&#109; 列表无序列表语法：无序列表用 - + * 任何一种都可以。12345- 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表语法：数字加点。123451. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 效果如下： 列表内容 列表内容 列表内容 嵌套列表语法：上一级和下一级之间敲三个空格即可 一级无序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级无序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 一级有序列表内容 二级无序列表内容 二级无序列表内容 二级无序列表内容 一级有序列表内容 二级有序列表内容 二级有序列表内容 二级有序列表内容 注意：在使用列表时，只要是数字后面加上英文的点，就会无意间产生列表，比如2019.5.18 这时候想表达的是日期，有些软件把它被误认为是列表。解决方式：在每个点前面加上\就可以了。如所示：示例：12019\.5\.18 效果如下：2019.5.18 表格语法：1234567891011|表头|表头|表头||---|:---:|---:||内容|内容|内容||内容|内容|内容|第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 示例1：12345| 法号 | 本领 | 排行 || :--------: | :-----: | :----: || 悟空 | 72变 | 大师兄|| 悟能 | 36变 | 二师哥|| 悟净 | 18变 | 三师弟| 效果如下： 法号 本领 排行 悟空 72变 大师兄 悟能 36变 二师哥 悟净 18变 三师弟 示例2：1234567891011121314151617181920212223242526272829表头1 | 表头2------------- | -------------Content Cell | Content CellContent Cell | Content Cell| 表头1 | 表头2|| ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell || 名字 | 描述 || ------------- | ----------- || Help | Display the help window.|| Close | Closes a window |表格中也可以使用普通文本的删除线，斜体等效果| 名字 | 描述 || ------------- | ----------- || Help | ~~Display the~~ help window.|| Close | _Closes_ a window |表格可以指定对齐方式| 左对齐 | 居中 | 右对齐 || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 效果如下：表头1 | 表头2————- | ————-Content Cell | Content CellContent Cell | Content Cell 表头1 表头2 Content Cell Content Cell Content Cell Content Cell 名字 描述 Help Display the help window. Close Closes a window 名字 描述 Help Display the help window. Close Closes a window 左对齐 居中 右对齐 col 3 is some wordy text $1600 col 2 is centered $12 zebra stripes are neat $1 代码单行代码语法：代码之间分别用一个反引号包起来。1`代码内容` 示例：1`create database hero;` 效果如下：create database hero; 代码块语法：代码之间分别用三个反引号包起来，且两边的反引号单独占一行。12345(```) 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例：123456(```) function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;; &#125; fun();(```) 效果如下：1234function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun(); 注释语法：用html的注释1&lt;!-- 用html的注释 --&gt; 转义字符Markdown中的转义字符为\，转义的有：123456789101112\\ 反斜杠\` 反引号\* 星号\_ 下划线\&#123;\&#125; 大括号\[\] 中括号\(\) 小括号\# 井号\+ 加号\- 减号\. 英文句号\! 感叹号 效果如下：\ 反斜杠` 反引号* 星号_ 下划线{} 大括号[] 中括号() 小括号# 井号+ 加号- 减号. 英文句号! 感叹号 其他特殊字符示例：1234567891011&amp;#10084&amp;#10003&amp;#9728&amp;#9733&amp;#9730&amp;#9775&amp;#9762&amp;#9742&amp;#8734&amp;#10052&amp;#9835 效果如下：&amp;#10084&amp;#10003&amp;#9728&amp;#9733&amp;#9730&amp;#9775&amp;#9762&amp;#9742&amp;#8734&amp;#10052&amp;#9835 想知道字符对应的Unicode码，可以看这个网站：https://unicode-table.com/cn/ 流程图效果如下： 段落与换行Markdown中段落指连续的一段文字，编写时段落之间至少一个空行隔开，段落内多个空格被视为一个空格，段首不支持缩进。如何想要在显示时显示多个空行，可以插入实现，注意的是，插入的应与前后的段落中间至少空一行。 段落缩进（空格）示例：1234半方大的空白&amp;ensp;或&amp;#8194;看，飞碟全方大的空白&amp;emsp;或&amp;#8195;看，飞碟不断行的空白格&amp;nbsp;或&amp;#160;看，飞碟&amp;emsp;&amp;emsp;段落从此开始。 效果如下：半方大的空白&ensp;或&#8194;看，飞碟全方大的空白&emsp;或&#8195;看，飞碟不断行的空白格&nbsp;或&#160;看，飞碟&emsp;&emsp;段落从此开始。 字体、字号、颜色、背景色示例：1234567&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;&lt;font color=#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;&lt;font color=#00ffff size=3&gt;null&lt;/font&gt;&lt;font color=gray size=5&gt;gray&lt;/font&gt;&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=#FF4500&gt;这里的背景色是：OrangeRed， 十六进制颜色值：#FF4500， rgb(255, 69, 0)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 效果如下： 我是黑体字 我是微软雅黑 我是华文彩云 黑体 null gray 这里的背景色是：OrangeRed， 十六进制颜色值：#FF4500， rgb(255, 69, 0) 快捷键 功能 快捷键 加粗 Ctrl + B 斜体 Ctrl + I 引用 Ctrl + Q 插入链接 Ctrl + L 插入代码 Ctrl + K 插入图片 Ctrl + G 提升标题 Ctrl + H 有序列表 Ctrl + O 无序列表 Ctrl + U 横线 Ctrl + R 撤销 Ctrl + Z 重做 Ctrl + Y GitHub特有特性复选框列表在列表符号后面加上[]或者[x]代表选中或者未选中情况。示例：1234567+ [x] C+ [x] C+++ [x] Java+ [x] Qt+ [x] Android+ [ ] C#+ [ ] .NET 效果如下： C C++ Java Qt Android C# .NET emoji表情符号emoji表情使用:EMOJICODE:的格式，详细列表可见：https://www.webpagefx.com/tools/emoji-cheat-sheet/当然现在很多markdown工具或者网站都不支持。 下面列出几个平台的对比： 工具/网站 emoji 简书 否 github 是 有道云笔记 否 st=>start: 开始 op=>operation: My Operation cond=>condition: Yes or No? e=>end st->op->cond cond(yes)->e cond(no)->op{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12} var code = document.getElementById("flowchart-0-code").value; var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value)); var diagram = flowchart.parse(code); diagram.drawSVG("flowchart-0", options);]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改GitHub项目语言显示问题]]></title>
    <url>%2F2019%2F05%2F18%2F%E4%BF%AE%E6%94%B9GitHub%E9%A1%B9%E7%9B%AE%E8%AF%AD%E8%A8%80%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98.html</url>
    <content type="text"><![CDATA[概述当我们上传项目到GitHub上，有时候项目显示的语言并非是我们自己项目所示的语言，这就导致我们在快速检索，或者外部访问者访问时不能够搜索到我们的项目，所以，此时就很有必要修改下语言。 修改GitHub语言1、在本地项目中或者GitHub项目中新建一个 .gitattributes的文件，输入以下内容：12345*.yml linguist-language=Java *.html linguist-language=Java *.js linguist-language=Java *.xml linguist-language=Java*.css linguist-language=Java 需要说明的是，假如我们的项目中有很多的诸如.html、.js等文件，在GitHub上会显示为HTML、JavaScript，所以.gitattributes文件内容的意思就是将忽略.xx什么什么文件，然后将其语言更改为Java，如果你的项目是其他语言，诸如C++等就将Java修改为C++等。当然了，这样修改也许还不能将你的项目语言修改成功，所以你需要去查询你项目中所有尽可能的后缀名文件影响语言的情况考虑，要根据GitHub给你当前项目设定的是什么语言，就从什么语言去考虑就好了。所以在.gitattributes文件中添加多一些属性就解决了。如下：123456789*.md linguist-language=Java *.yml linguist-language=Java *.html linguist-language=Java *.js linguist-language=Java *.xml linguist-language=Java*.css linguist-language=Java *.sql linguist-language=Java*.uml linguist-language=Java *.cmd linguist-language=Java]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有趣的SpringBoot启动banner（持续更新）]]></title>
    <url>%2F2019%2F05%2F18%2F%E6%9C%89%E8%B6%A3%E7%9A%84SpringBoot%E5%90%AF%E5%8A%A8banner%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89.html</url>
    <content type="text"><![CDATA[千里马123456789101112131415161718192021 _(\_/) ,((((^`\ (((( (6 \ ,((((( , \ ,,,_ ,((((( /&quot;._ ,`, ((((\\ ,... ,(((( / `-.-&apos; ))) ;&apos; `&quot;&apos;&quot;&apos;&quot;&quot;(((( ( ((( / ((( \ )) | |(( | . &apos; |)) \ _ &apos; `t ,.&apos;)( | y;- -,-&quot;&quot;&apos;&quot;-.\ \/ ) / ./ ) / `\ \ |./ ( ( / /&apos; || \\ //&apos;| || \\ _//&apos;|| || )) |_/ || \_\ |_/ || `&apos;&quot; \_\ `&apos;&quot; 文字兔12345678910111213141516171819202122232425262728293031323334353637/*** * 瓦瓦 十 * 十齱龠己 亅瓦車己 * 乙龍龠毋日丶 丶乙己毋毋丶 * 十龠馬鬼車瓦 己十瓦毋毋 * 鬼馬龠馬龠十 己己毋車毋瓦 * 毋龠龠龍龠鬼乙丶丶乙車乙毋鬼車己 * 乙龠龍龍鬼龍瓦 十瓦毋乙瓦龠瓦亅 * 馬齱龍馬鬼十丶日己己己毋車乙丶 * 己齱馬鬼車十十毋日乙己己乙乙 * 車馬齱齱日乙毋瓦己乙瓦日亅 * 亅車齺龖瓦乙車龖龍乙乙十 * 日龠龠十亅車龍毋十十 * 日毋己亅 己己十亅亅 * 丶己十十乙 丶丶丶丶丶 * 亅己十龍龖瓦 丶 丶 乙十 * 亅己十龠龖毋 丶丶 丶己鬼鬼瓦亅 * 十日十十日亅丶亅丶 丶十日毋鬼馬馬車乙 * 十日乙十亅亅亅丶 十乙己毋鬼鬼鬼龍齺馬乙 * 丶瓦己乙十十亅丶亅乙乙乙己毋鬼鬼鬼龍齱齺齺鬼十 * 乙乙十十十亅乙瓦瓦己日瓦毋鬼鬼龠齱齱龍龍齱齱毋丶 * 亅十十十十乙瓦車毋瓦瓦日車馬龠龍龍龍龍龍龠龠龠馬亅 * 十十十十己毋車瓦瓦瓦瓦鬼馬龠龍龠龠龍龠龠龠馬龠車 * 亅十十日毋瓦日日瓦鬼鬼鬼龠龠馬馬龠龍龍龠馬馬車 * 亅亅亅乙瓦瓦毋車車車馬龍龠鬼鬼馬龠龍龍龠馬馬鬼 * 丶丶乙亅亅乙車鬼鬼鬼毋車龍龍龠鬼馬馬龠龍齱齱龍馬鬼 * 亅己十十己十日鬼鬼車瓦毋龠龍龠馬馬龠龠龠齱齺齺齱龠鬼 * 亅乙乙乙十車馬車毋馬齱齱龍龠龠龠馬龠龍齱龍龠龠鬼瓦 * 丶毋龠鬼車瓦車馬龠龍龠龠龍齱齱龠馬馬鬼毋日 * 十乙己日十 丶己鬼龍齱齺齱龍馬馬馬車毋己 * 丶十己乙亅丶 亅瓦馬龠龍龠龠馬毋瓦乙 * 丶十十乙亅十 亅己瓦車馬龠鬼車瓦乙 * 丶十乙十十丶 丶丶亅十瓦鬼車瓦己 * 丶亅亅丶 亅日瓦日 * 丶 */ 狗头1123456789101112131415161718192021222324252627282930313233343536373839/*** * .,:,,, .::,,,::. * .::::,,;;, .,;;:,,....:i: * :i,.::::,;i:. ....,,:::::::::,.... .;i:,. ......;i. * :;..:::;::::i;,,:::;:,,,,,,,,,,..,.,,:::iri:. .,:irsr:,.;i. * ;;..,::::;;;;ri,,,. ..,,:;s1s1ssrr;,.;r, * :;. ,::;ii;:, . ................... .;iirri;;;,,;i, * ,i. .;ri:. ... ............................ .,,:;:,,,;i: * :s,.;r:... ....................................... .::;::s; * ,1r::. .............,,,.,,:,,........................,;iir; * ,s;........... ..::.,;:,,. ...............,;1s * :i,..,. .,:,,::,. .......... .......;1, * ir,....:rrssr;:, ,,.,::. .r5S9989398G95hr;. ....,.:s, * ;r,..,s9855513XHAG3i .,,,,,,,. ,S931,.,,.;s;s&amp;BHHA8s.,..,..:r: * :r;..rGGh, :SAG;;G@BS:.,,,,,,,,,.r83: hHH1sXMBHHHM3..,,,,.ir. * ,si,.1GS, sBMAAX&amp;MBMB5,,,,,,:,,.:&amp;8 3@HXHBMBHBBH#X,.,,,,,,rr * ;1:,,SH: .A@&amp;&amp;B#&amp;8H#BS,,,,,,,,,.,5XS, 3@MHABM&amp;59M#As..,,,,:,is, * .rr,,,;9&amp;1 hBHHBB&amp;8AMGr,,,,,,,,,,,:h&amp;&amp;9s; r9&amp;BMHBHMB9: . .,,,,;ri. * :1:....:5&amp;XSi;r8BMBHHA9r:,......,,,,:ii19GG88899XHHH&amp;GSr. ...,:rs. * ;s. .:sS8G8GG889hi. ....,,:;:,.:irssrriii:,. ...,,i1, * ;1, ..,....,,isssi;, .,,. ....,.i1, * ;h: i9HHBMBBHAX9: . ...,,,rs, * ,1i.. :A#MBBBBMHB##s ....,,,;si. * .r1,.. ,..;3BMBBBHBB#Bh. .. ....,,,,,i1; * :h;.. .,..;,1XBMMMMBXs,.,, .. :: ,. ....,,,,,,ss. * ih: .. .;;;, ;;:s58A3i,.. ,. ,.:,,. ...,,,,,:,s1, * .s1,.... .,;sh, ,iSAXs;. ,. ,,.i85 ...,,,,,,:i1; * .rh: ... rXG9XBBM#M#MHAX3hss13&amp;&amp;HHXr .....,,,,,,,ih; * .s5: ..... i598X&amp;&amp;A&amp;AAAAAA&amp;XG851r: ........,,,,:,,sh; * . ihr, ... . .. ........,,,,,;11:. * ,s1i. ... ..,,,..,,,.,,.,,.,.. ........,,.,,.;s5i. * .:s1r,...................... ..............;shs, * . .:shr:. .... ..............,ishs. * .,issr;,... ...........................,is1s;. * .,is1si;:,....................,:;ir1sr;, * ..:isssssrrii;::::::;;iirsssssr;:.. * .,::iiirsssssssssrri;;:. */ 狗头212345678910111213141516171819202122232425262728293031323334353637383940/*** * ii. ;9ABH, * SA391, .r9GG35&amp;G * &amp;#ii13Gh; i3X31i;:,rB1 * iMs,:,i5895, .5G91:,:;:s1:8A * 33::::,,;5G5, ,58Si,,:::,sHX;iH1 * Sr.,:;rs13BBX35hh11511h5Shhh5S3GAXS:.,,::,,1AG3i,GG * .G51S511sr;;iiiishS8G89Shsrrsh59S;.,,,,,..5A85Si,h8 * :SB9s:,............................,,,.,,,SASh53h,1G. * .r18S;..,,,,,,,,,,,,,,,,,,,,,,,,,,,,,....,,.1H315199,rX, * ;S89s,..,,,,,,,,,,,,,,,,,,,,,,,....,,.......,,,;r1ShS8,;Xi * i55s:.........,,,,,,,,,,,,,,,,.,,,......,.....,,....r9&amp;5.:X1 * 59;.....,. .,,,,,,,,,,,... .............,..:1;.:&amp;s * s8,..;53S5S3s. .,,,,,,,.,.. i15S5h1:.........,,,..,,:99 * 93.:39s:rSGB@A; ..,,,,..... .SG3hhh9G&amp;BGi..,,,,,,,,,,,,.,83 * G5.G8 9#@@@@@X. .,,,,,,..... iA9,.S&amp;B###@@Mr...,,,,,,,,..,.;Xh * Gs.X8 S@@@@@@@B:..,,,,,,,,,,. rA1 ,A@@@@@@@@@H:........,,,,,,.iX: * ;9. ,8A#@@@@@@#5,.,,,,,,,,,... 9A. 8@@@@@@@@@@M; ....,,,,,,,,S8 * X3 iS8XAHH8s.,,,,,,,,,,...,..58hH@@@@@@@@@Hs ...,,,,,,,:Gs * r8, ,,,...,,,,,,,,,,..... ,h8XABMMHX3r. .,,,,,,,.rX: * :9, . .:,..,:;;;::,.,,,,,.. .,,. ..,,,,,,.59 * .Si ,:.i8HBMMMMMB&amp;5,.... . .,,,,,.sMr * SS :: h@@@@@@@@@@#; . ... . ..,,,,iM5 * 91 . ;:.,1&amp;@@@@@@MXs. . .,,:,:&amp;S * hS .... .:;,,,i3MMS1;..,..... . . ... ..,:,.99 * ,8; ..... .,:,..,8Ms:;,,,... .,::.83 * s&amp;: .... .sS553B@@HX3s;,. .,;13h. .:::&amp;1 * SXr . ...;s3G99XA&amp;X88Shss11155hi. ,;:h&amp;, * iH8: . .. ,;iiii;,::,,,,,. .;irHA * ,8X5; . ....... ,;iihS8Gi * 1831, .,;irrrrrs&amp;@ * ;5A8r. .:;iiiiirrss1H * :X@H3s....... .,:;iii;iiiiirsrh * r#h:;,...,,.. .,,:;;;;;:::,... .:;;;;;;iiiirrss1 * ,M8 ..,....,.....,,::::::,,... . .,;;;iiiiiirss11h * 8B;.,,,,,,,.,..... . .. .:;;;;iirrsss111h * i@5,:::,,,,,,,,.... . . .:::;;;;;irrrss111111 * 9Bi,:,,,,...... ..r91;;;;;iirrsss1ss1111 */ 滑稽笑脸12345678910111213141516171819202122232425262728293031323334/*** * .,, .,:;;iiiiiiiii;;:,,. .,, * rGB##HS,.;iirrrrriiiiiiiiiirrrrri;,s&amp;##MAS, * r5s;:r3AH5iiiii;;;;;;;;;;;;;;;;iiirXHGSsiih1, * .;i;;s91;;;;;;::::::::::::;;;;iS5;;;ii: * :rsriii;;r::::::::::::::::::::::;;,;;iiirsi, * .,iri;;::::;;;;;;::,,,,,,,,,,,,,..,,;;;;;;;;iiri,,. * ,9BM&amp;, .,:;;:,,,,,,,,,,,hXA8: ..,,,. * ,;&amp;@@#r:;;;;;::::,,. ,r,,,,,,,,,,iA@@@s,,:::;;;::,,. .;. * :ih1iii;;;;;::::;;;;;;;:,,,,,,,,,,;i55r;;;;;;;;;iiirrrr,.. * .ir;;iiiiiiiiii;;;;::::::,,,,,,,:::::,,:;;;iiiiiiiiiiiiri * iriiiiiiiiiiiiiiii;;;::::::::::::::::;;;iiiiiiiiiiiiiiiir; * ,riii;;;;;;;;;;;;;:::::::::::::::::::::::;;;;;;;;;;;;;;iiir. * iri;;;::::,,,,,,,,,,:::::::::::::::::::::::::,::,,::::;;iir: * .rii;;::::,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,::::;;iri * ,rii;;;::,,,,,,,,,,,,,:::::::::::,:::::,,,,,,,,,,,,,:::;;;iir. * ,rii;;i::,,,,,,,,,,,,,:::::::::::::::::,,,,,,,,,,,,,,::i;;iir. * ,rii;;r::,,,,,,,,,,,,,:,:::::,:,:::::::,,,,,,,,,,,,,::;r;;iir. * .rii;;rr,:,,,,,,,,,,,,,,:::::::::::::::,,,,,,,,,,,,,:,si;;iri * ;rii;:1i,,,,,,,,,,,,,,,,,,:::::::::,,,,,,,,,,,,,,,:,ss:;iir: * .rii;;;5r,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,sh:;;iri * ;rii;:;51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.:hh:;;iir, * irii;::hSr,.,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,.,sSs:;;iir: * irii;;:iSSs:.,,,,,,,,,,,,,,,,,,,,,,,,,,,..:135;:;;iir: * ;rii;;:,r535r:...,,,,,,,,,,,,,,,,,,..,;sS35i,;;iirr: * :rrii;;:,;1S3Shs;:,............,:is533Ss:,;;;iiri, * .;rrii;;;:,;rhS393S55hh11hh5S3393Shr:,:;;;iirr: * .;rriii;;;::,:;is1h555555h1si;:,::;;;iirri:. * .:irrrii;;;;;:::,,,,,,,,:::;;;;iiirrr;, * .:irrrriiiiii;;;;;;;;iiiiiirrrr;,. * .,:;iirrrrrrrrrrrrrrrrri;:. * ..,:::;;;;:::,,. */ 键盘1234567891011121314151617/*** * ┌───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐ * │Esc│ │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P/S│S L│P/B│ ┌┐ ┌┐ ┌┐ * └───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘ └┘ └┘ └┘ * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐ * │~ `│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ =│ BacSp │ │Ins│Hom│PUp│ │N L│ / │ * │ - │ * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤ * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │ │ * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │ * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &apos;│ Enter │ │ 4 │ 5 │ 6 │ │ * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤ ┌───┐ ├───┼───┼───┼───┤ * │ Shift │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? /│ Shift │ │ ↑ │ │ 1 │ 2 │ 3 │ │ * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││ * │ Ctrl│ │Alt │ Space │ Alt│ │ │Ctrl│ │ ← │ ↓ │ → │ │ 0 │ . │←─┘│ * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘ */ 佛祖保佑123456789101112131415161718192021222324/*** * _ooOoo_ * o8888888o * 88&quot; . &quot;88 * (| -_- |) * O\ = /O * ____/`---&apos;\____ * . &apos; \\| |// `. * / \\||| : |||// \ * / _||||| -:- |||||- \ * | | \\\ - /// | | * | \_| &apos;&apos;\---/&apos;&apos; | | * \ .-\__ `-` ___/-. / * ___`. .&apos; /--.--\ `. . __ * .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;. * | | : `- \`.;`\ _ /`;.`/ - ` : | | * \ \ `-. \_ __\ /__ _/ .-` / / * ======`-.____`-.___\_____/___.-`____.-&apos;====== * `=---=&apos; * * ............................................. * 佛祖保佑 永无BUG */ 佛曰123456789101112/*** * 佛曰: * 写字楼里写字间，写字间里程序员； * 程序人员写程序，又拿程序换酒钱。 * 酒醒只在网上坐，酒醉还来网下眠； * 酒醉酒醒日复日，网上网下年复年。 * 但愿老死电脑间，不愿鞠躬老板前； * 奔驰宝马贵者趣，公交自行程序员。 * 别人笑我忒疯癫，我笑自己命太贱； * 不见满街漂亮妹，哪个归得程序员？ */ 佛祖瘫痪1234567891011121314151617181920212223/*** * _ooOoo_ * o8888888o * 88&quot; . &quot;88 * (| -_- |) * O\ = /O * ___/`---&apos;\____ * . &apos; \\| |// `. * / \\||| : |||// \ * / _||||| -:- |||||- \ * | | \\\ - /// | | * | \_| &apos;&apos;\---/&apos;&apos; | | * \ .-\__ `-` ___/-. / * ___`. .&apos; /--.--\ `. . __ * .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;. * | | : `- \`.;`\ _ /`;.`/ - ` : | | * \ \ `-. \_ __\ /__ _/ .-` / / * ======`-.____`-.___\_____/___.-`____.-&apos;====== * `=---=&apos; * ............................................. * 佛曰：bug泛滥，我已瘫痪！ */ Fuck Bug12345678910111213/*** * * █████▒█ ██ ▄████▄ ██ ▄█▀ ██████╗ ██╗ ██╗ ██████╗ * ▓██ ▒ ██ ▓██▒▒██▀ ▀█ ██▄█▒ ██╔══██╗██║ ██║██╔════╝ * ▒████ ░▓██ ▒██░▒▓█ ▄ ▓███▄░ ██████╔╝██║ ██║██║ ███╗ * ░▓█▒ ░▓▓█ ░██░▒▓▓▄ ▄██▒▓██ █▄ ██╔══██╗██║ ██║██║ ██║ * ░▒█░ ▒▒█████▓ ▒ ▓███▀ ░▒██▒ █▄ ██████╔╝╚██████╔╝╚██████╔╝ * ▒ ░ ░▒▓▒ ▒ ▒ ░ ░▒ ▒ ░▒ ▒▒ ▓▒ ╚═════╝ ╚═════╝ ╚═════╝ * ░ ░░▒░ ░ ░ ░ ▒ ░ ░▒ ▒░ * ░ ░ ░░░ ░ ░ ░ ░ ░░ ░ * ░ ░ ░ ░ ░ */ 哭脸神兽12345678910111213141516171819202122232425/*** * ┌─┐ ┌─┐ * ┌──┘ ┴───────┘ ┴──┐ * │ │ * │ ─── │ * │ ─┬┘ └┬─ │ * │ │ * │ ─┴─ │ * │ │ * └───┐ ┌───┘ * │ │ * │ │ * │ │ * │ └──────────────┐ * │ │ * │ ├─┐ * │ ┌─┘ * │ │ * └─┐ ┐ ┌───────┬──┐ ┌──┘ * │ ─┤ ─┤ │ ─┤ ─┤ * └──┴──┘ └──┴──┘ * 神兽保佑 * 代码无BUG! */ 害羞神兽12345678910111213141516171819202122232425/*** * ┌─┐ ┌─┐ * ┌──┘ ┴───────┘ ┴──┐ * │ │ * │ ─── │ * │ &gt; &lt; │ * │ │ * │ ... ⌒ ... │ * │ │ * └───┐ ┌───┘ * │ │ * │ │ * │ │ * │ └──────────────┐ * │ │ * │ ├─┐ * │ ┌─┘ * │ │ * └─┐ ┐ ┌───────┬──┐ ┌──┘ * │ ─┤ ─┤ │ ─┤ ─┤ * └──┴──┘ └──┴──┘ * 神兽保佑 * 代码无BUG! */ 墨镜神兽12345678910111213141516171819202122232425/*** * ┌─┐ ┌─┐ + + * ┌──┘ ┴───────┘ ┴──┐++ * │ │ * │ ─── │++ + + + * ███████───███████ │+ * │ │+ * │ ─┴─ │ * │ │ * └───┐ ┌───┘ * │ │ * │ │ + + * │ │ * │ └──────────────┐ * │ │ * │ ├─┐ * │ ┌─┘ * │ │ * └─┐ ┐ ┌───────┬──┐ ┌──┘ + + + + * │ ─┤ ─┤ │ ─┤ ─┤ * └──┴──┘ └──┴──┘ + + + + * 神兽保佑 * 代码无BUG! */ 蝙蝠123456789101112131415161718192021/*** * ___====-_ _-====___ * _--^^^#####// \\#####^^^--_ * _-^##########// ( ) \\##########^-_ * -############// |\^^/| \\############- * _/############// (@::@) \\############\_ * /#############(( \\// ))#############\ * -###############\\ (oo) //###############- * -#################\\ / VV \ //#################- * -###################\\/ \//###################- * _#/|##########/\######( /\ )######/\##########|\#_ * |/ |#/\#/\#/\/ \#/\##\ | | /##/\#/ \/\#/\#/\#| \| * ` |/ V V ` V \#\| | | |/#/ V &apos; V V \| &apos; * ` ` ` ` / | | | | \ &apos; &apos; &apos; &apos; * ( | | | | ) * __\ | | | | /__ * (vvv(VVV)(VVV)vvv) * 神兽保佑 * 代码无BUG! */ 飞天龙123456789101112131415161718192021222324/*** * * * __----~~~~~~~~~~~------___ * . . ~~//====...... __--~ ~~ * -. \_|// |||\\ ~~~~~~::::... /~ * ___-==_ _-~o~ \/ ||| \\ _/~~- * __---~~~.==~||\=_ -_--~/_-~|- |\\ \\ _/~ * _-~~ .=~ | \\-_ &apos;-~7 /- / || \ / * .~ .~ | \\ -_ / /- / || \ / * / ____ / | \\ ~-_/ /|- _/ .|| \ / * |~~ ~~|--~~~~--_ \ ~==-/ | \~--===~~ .\ * &apos; ~-| /| |-~\~~ __--~~ * |-~~-_/ | | ~\_ _-~ /\ * / \ \__ \/~ \__ * _--~ _/ | .-~~____--~-/ ~~==. * ((-&gt;/~ &apos;.|||&apos; -_| ~~-/ , . _|| * -_ ~\ ~~---l__i__i__i--~~_/ * _-~-__ ~) \--______________--~~ * //.-~~~-~_--~- |-------~~~~~~~~ * //.-~~~--\ * 神兽保佑 * 代码无BUG! */ 猪123456789101112131415/*** _ * _._ _..._ .-&apos;, _.._(`)) * &apos;-. ` &apos; /-._.-&apos; &apos;,/ * ) \ &apos;. * / _ _ | \ * | a a / | * \ .-. ; * &apos;-(&apos;&apos; ).-&apos; ,&apos; ; * &apos;-; | .&apos; * \ \ / * | 7 .__ _.-\ \ * | | | ``/ /` / * /,_| | /,_/ / * /,_/ &apos;`-&apos; */ 骷髅头123456789101112131415161718192021222324/*** ************************************************************** * * * .=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-. * * | ______ | * * | .-&quot; &quot;-. | * * | / \ | * * | _ | | _ | * * | ( \ |, .-. .-. ,| / ) | * * | &gt; &quot;=._ | )(__/ \__)( | _.=&quot; &lt; | * * | (_/&quot;=._&quot;=._ |/ /\ \| _.=&quot;_.=&quot;\_) | * * | &quot;=._&quot;(_ ^^ _)&quot;_.=&quot; | * * | &quot;=\__|IIIIII|__/=&quot; | * * | _.=&quot;| \IIIIII/ |&quot;=._ | * * | _ _.=&quot;_.=&quot;\ /&quot;=._&quot;=._ _ | * * | ( \_.=&quot;_.=&quot; `--------` &quot;=._&quot;=._/ ) | * * | &gt; _.=&quot; &quot;=._ &lt; | * * | (_/ \_) | * * | | * * &apos;-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=&apos; * * * * LASCIATE OGNI SPERANZA, VOI CH&apos;ENTRATE * ************************************************************** */ 妈妈再爱我一次123456789101112131415161718192021222324252627282930313233/*** * ,s555SB@@&amp; * :9H####@@@@@Xi * 1@@@@@@@@@@@@@@8 * ,8@@@@@@@@@B@@@@@@8 * :B@@@@X3hi8Bs;B@@@@@Ah, * ,8i r@@@B: 1S ,M@@@@@@#8; * 1AB35.i: X@@8 . SGhr ,A@@@@@@@@S * 1@h31MX8 18Hhh3i .i3r ,A@@@@@@@@@5 * ;@&amp;i,58r5 rGSS: :B@@@@@@@@@@A * 1#i . 9i hX. .: .5@@@@@@@@@@@1 * sG1, ,G53s. 9#Xi;hS5 3B@@@@@@@B1 * .h8h.,A@@@MXSs, #@H1: 3ssSSX@1 * s ,@@@@@@@@@@@@Xhi, r#@@X1s9M8 .GA981 * ,. rS8H#@@@@@@@@@@#HG51;. .h31i;9@r .8@@@@BS;i; * .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS * s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;, * :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B, * .hM@@@#@@#MX 51 r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8 * :3B@@@@@@@@@@@&amp;9@h :Gs .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@: * s&amp;HA#@@@@@@@@@@@@@@M89A;.8S. ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r * ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;. ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i * 5#@@#&amp;@@@@@@@@@@@@@@@@@@9 .39: ;@@@@@@@@@@@@@@@@@@@@@@@@@@@; * 9@@@X:MM@@@@@@@@@@@@@@@#; ;31. H@@@@@@@@@@@@@@@@@@@@@@@@@@: * SH#@B9.rM@@@@@@@@@@@@@B :. 3@@@@@@@@@@@@@@@@@@@@@@@@@@5 * ,:. 9@@@@@@@@@@@#HB5 .M@@@@@@@@@@@@@@@@@@@@@@@@@B * ,ssirhSM@&amp;1;i19911i,. s@@@@@@@@@@@@@@@@@@@@@@@@@@S * ,,,rHAri1h1rh&amp;@#353Sh: 8@@@@@@@@@@@@@@@@@@@@@@@@@#: * .A3hH@#5S553&amp;@@#h i:i9S #@@@@@@@@@@@@@@@@@@@@@@@@@A. * * * 又看源码，看你妹妹呀！ */ 初音12345678910111213141516171819202122232425/*** *_______________#########_______________________ *______________############_____________________ *______________#############____________________ *_____________##__###########___________________ *____________###__######_#####__________________ *____________###_#######___####_________________ *___________###__##########_####________________ *__________####__###########_####_______________ *________#####___###########__#####_____________ *_______######___###_########___#####___________ *_______#####___###___########___######_________ *______######___###__###########___######_______ *_____######___####_##############__######______ *____#######__#####################_#######_____ *____#######__##############################____ *___#######__######_#################_#######___ *___#######__######_######_#########___######___ *___#######____##__######___######_____######___ *___#######________######____#####_____#####____ *____######________#####_____#####_____####_____ *_____#####________####______#####_____###______ *______#####______;###________###______#________ *________##_______####________####______________ */ 攻城湿123456789101112131415161718192021/*** * ,%%%%%%%%, * ,%%/\%%%%/\%% * ,%%%\c &quot;&quot; J/%%% * %. %%%%/ o o \%%% * `%%. %%%% _ |%%% * `%% `%%%%(__Y__)%%&apos; * // ;%%%%`\-/%%%&apos; * (( / `%%%%%%%&apos; * \\ .&apos; | * \\ / \ | | * \\/ ) | | * \ /_ | |__ * (___________))))))) 攻城湿 * * _ _ * __ _(_)_ _(_) __ _ _ __ * \ \ / / \ \ / / |/ _` |&apos;_ \ * \ V /| |\ V /| | (_| | | | | * \_/ |_| \_/ |_|\__,_|_| |_| */ 掘金1234567891011121314151617181920212223/*** * https://gold.xitu.io/ * １１１ １ * １１１ １１１１１１１１１１１１ １１１ * １１ １１１１１１１１１１１１ １１１１１ * １１ １１１ １１ １１１１１１１ * １１１１ １ １１１１１１１１１１１ １１１ １１１１ * １１１１１１ １１１１１１１１１１１ １１１１ １１１１１ * １１１１１１ １１ １１１１ １１１１１１ * １１ １１１１１１１１ １１ １１１１１１１１１１１１１１１１１１ * １１ １１１１１１１１１１１ １１１１１１１１１１１１１１１１１１１ * １１１１１１１１１ １１ １１ １１ １１ * １１１１１１１１１１１１１１１１１１ １１ * １１１１ １１１１１１１１１１１１ １１１１１１１１１１１１１１ * １１１１ １１ １１ １１１１１１１１１１１１１１ * １１ １１ １１ １１ １１１ １１ １１ １１１ * １１ １１ １１ １１ １１ １１１ １１ １１１ * １１ １１１ １１ １１ １１ １１１ １１ １１１ * １１１１ １１１ １１１１１１１１１ １１ １１１ １１ １１１１１１１ * １１１１１１ １１１１１１１１１１ １１１１１１１１１１１１１１１１１ * １１ １１１ １１１ １１１１１１１１１１１１１１１１１ */ 知乎123456789101112131415161718192021222324/*** * https://www.zhihu.com/ * _____ _____ _____ _____ * /\ \ /\ \ /\ \ /\ \ * /::\____\ /::\ \ /::\ \ /::\ \ * /:::/ / \:::\ \ /::::\ \ /::::\ \ * /:::/ / \:::\ \ /::::::\ \ /::::::\ \ * /:::/ / \:::\ \ /:::/\:::\ \ /:::/\:::\ \ * /:::/____/ \:::\ \ /:::/__\:::\ \ /:::/__\:::\ \ * /::::\ \ /::::\ \ /::::\ \:::\ \ /::::\ \:::\ \ * /::::::\ \ _____ ____ /::::::\ \ /::::::\ \:::\ \ /::::::\ \:::\ \ * /:::/\:::\ \ /\ \ /\ \ /:::/\:::\ \ /:::/\:::\ \:::\____\ /:::/\:::\ \:::\ \ * /:::/ \:::\ /::\____\/::\ \/:::/ \:::\____\/:::/ \:::\ \:::| |/:::/__\:::\ \:::\____\ * \::/ \:::\ /:::/ /\:::\ /:::/ \::/ /\::/ |::::\ /:::|____|\:::\ \:::\ \::/ / * \/____/ \:::\/:::/ / \:::\/:::/ / \/____/ \/____|:::::\/:::/ / \:::\ \:::\ \/____/ * \::::::/ / \::::::/ / |:::::::::/ / \:::\ \:::\ \ * \::::/ / \::::/____/ |::|\::::/ / \:::\ \:::\____\ * /:::/ / \:::\ \ |::| \::/____/ \:::\ \::/ / * /:::/ / \:::\ \ |::| ~| \:::\ \/____/ * /:::/ / \:::\ \ |::| | \:::\ \ * /:::/ / \:::\____\ \::| | \:::\____\ * \::/ / \::/ / \:| | \::/ / * \/____/ \/____/ \|___| \/____/ */ freebuf1234567891011121314151617181920212223242526272829/*** * http://www.freebuf.com/ * _.._ ,------------. * ,&apos; `. ( We want you! ) * / __) __` \ `-,----------&apos; * ( (`-`(-&apos;) ) _.-&apos; * /) \ = / ( * /&apos; |--&apos; . \ * ( ,---| `-.)__` * )( `-.,--&apos; _`-. * &apos;/,&apos; ( Uu&quot;, * (_ , `/,-&apos; ) * `.__, : `-&apos;/ /`--&apos; * | `--&apos; | * ` `-._ / * \ ( * /\ . \. freebuf * / |` \ ,-\ * / \| .) / \ * ( ,&apos;|\ ,&apos; : * | \,`.`--&quot;/ &#125; * `,&apos; \ |,&apos; / * / &quot;-._ `-/ | * &quot;-. &quot;-.,&apos;| ; * / _/[&quot;---&apos;&quot;&quot;] * : / |&quot;- &apos; * &apos; | / * ` | */ Alibaba12345678910111213141516171819202122232425262728293031323334353637/*** * https://campus.alibaba.com/ * `:::::::::::, * `::;:::::::;:::::::, ` * `::;;:::::::@@@@;:::::::` * ,:::::::::::::@ #@&apos;:::::` * :::::::::::::::&apos;@@ @;:::: * ::::::::::::&apos;@@@@&apos;``` .+:::` * ::::::::::;@@@#. ,:::, * .::::::::+@#@` :::: * :::::::+@@&apos; :::: * `:::::&apos;@@: `:::. * ,::::@@: ` :::: * ;::::::@ .:::; * :;:::::;@` ` :::; * :::::::::@` @ ;:::: * :::::::::#` @` ,:::: * :::::::::@` +@ @ .::::` * .::::::&apos;@@` `@@&apos; @ ::::, * :::::::++@@@@@@@@@@. ::::; * ;:::::::+, `..` ::::: * ,::::::::&apos;, ::::: * :::::::::+, :::::` * :::::::::+@. ,::::.` `, * ::::::;;@+ .::;:: `; * :::::::@@ `:::;: `::`` * ::::::#@ ;:::: .::` * :::::;@ :::::` .;::` * :::::@ `:;::: `::::; * :::::# :::::. `,;::::: * :::::: ` ::::::,.,::::::::::. * ,::::::` .:: ::::::::::::::::;` * ;::::::::,````.,:::::, ::::::::::::::. * :::::::::::::::::: ` `::::::::::` * `::::::::::::, .:::. * `..` */ 小老鼠123456789101112131415/*** * http://www.flvcd.com/ * .--, .--, * ( ( \.---./ ) ) * &apos;.__/o o\__.&apos; * &#123;= ^ =&#125; * &gt; - &lt; * / \ * // \\ * //| . |\\ * &quot;&apos;\ /&apos;&quot;_.-~^`&apos;-. * \ _ /--&apos; ` * ___)( )(___ * (((__) (__))) 高山仰止,景行行止.虽不能至,心向往之。 */ 顶12345678910111213141516/*** * 頂頂頂頂頂頂頂頂頂 頂頂頂頂頂頂頂頂頂 * 頂頂頂頂頂頂頂 頂頂 * 頂頂 頂頂頂頂頂頂頂頂頂頂頂 * 頂頂 頂頂頂頂頂頂頂頂頂頂頂 * 頂頂 頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂 頂頂頂 頂頂 * 頂頂 頂頂頂 * 頂頂 頂頂 頂頂 頂頂 * 頂頂頂頂 頂頂頂頂頂 頂頂頂頂頂 * 頂頂頂頂 頂頂頂頂 頂頂頂頂 */ 单身狗的凝视123456789101112131415/*** * ░░░░░░░░░░░░░░░░░░░░░░░░▄░░ * ░░░░░░░░░▐█░░░░░░░░░░░▄▀▒▌░ * ░░░░░░░░▐▀▒█░░░░░░░░▄▀▒▒▒▐ * ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐ * ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐ * ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌ * ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒ * ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐ * ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄ * ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒ * ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒ * 单身狗就这样默默地看着你，一句话也不说。 */ 埃及法老1234567891011121314151617181920212223242526272829303132333435/*** * /88888888888888888888888888\ * |88888888888888888888888888/ * |~~____~~~~~~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;| * / \_________/&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\ * / | \ \ * / | 88 88 \ \ * / | 88 88 \ \ * / / \ | * / | ________ \ | * \ | \______/ / | * /&quot;\ \ \____________ / | * | |__________\_ | | / / * /&quot;&quot;&quot;&quot;\ \_------&apos; &apos;-------/ -- * \____/,___________\ -------/ * ------* | \ * || | \ * || | ^ \ * || | | \ \ * || | | \ \ * || | | \ \ * \| / /&quot;&quot;&quot;\/ / * ------------- | | / * |\--_ \____/___/ * | |\-_ | * | | \_ | * | | \ | * | | \_ | * | | ----___ | * | | \----------| * / | | ----------&quot;&quot;\ * /&quot;\--&quot;--_| | | \ * |_______/ \______________/ ) * \___/ */ 耶123456789101112131415161718192021222324252627282930313233343536/*** * d*##$. * zP&quot;&quot;&quot;&quot;&quot;$e. $&quot; $o * 4$ &apos;$ $&quot; $ * &apos;$ &apos;$ J$ $F * &apos;b $k $&gt; $ * $k $r J$ d$ * &apos;$ $ $&quot; $~ * &apos;$ &quot;$ &apos;$E $ * $ $L $&quot; $F ... * $. 4B $ $$$*&quot;&quot;&quot;*b * &apos;$ $. $$ $$ $F * &quot;$ R$ $F $&quot; $ * $k ?$ u* dF .$ * ^$. $$&quot; z$ u$$$$e * #$b $E.dW@e$&quot; ?$ * #$ .o$$# d$$$$c ?F * $ .d$$#&quot; . zo$&gt; #$r .uF * $L .u$*&quot; $&amp;$$$k .$$d$$F * $$&quot; &quot;&quot;^&quot;$$$P&quot;$P9$ * JP .o$$$$u:$P $$ * $ ..ue$&quot; &quot;&quot; $&quot; * d$ $F $ * $$ ....udE 4B * #$ &quot;&quot;&quot;&quot;` $r @$ * ^$L &apos;$ $F * RN 4N $ * *$b d$ * $$k $F * $$b $F * $&quot;&quot; $F * &apos;$ $ * $L $ * &apos;$ $ * $ $ */ 台式电脑1234567891011121314151617181920/*** * ,----------------, ,---------, * ,-----------------------, ,&quot; ,&quot;| * ,&quot; ,&quot;| ,&quot; ,&quot; | * +-----------------------+ | ,&quot; ,&quot; | * | .-----------------. | | +---------+ | * | | | | | | -==----&apos;| | * | | I LOVE DOS! | | | | | | * | | Bad command or | | |/----|`---= | | * | | C:\&gt;_ | | | ,/|==== ooo | ; * | | | | | // |(((( [33]| ,&quot; * | `-----------------&apos; |,&quot; .;&apos;| |(((( | ,&quot; * +-----------------------+ ;; | | |,&quot; * /_)______________(_/ //&apos; | +---------+ * ___________________________/___ `, * / oooooooooooooooo .o. oooo /, \,&quot;----------- * / ==ooooooooooooooo==.o. ooo= // ,`\--&#123;)B ,&quot; * /_==__==========__==_ooo__ooo=_/&apos; /___________,&quot; * */ 书本123456789101112/*** * .-~~~~~~~~~-._ _.-~~~~~~~~~-. * __.&apos; ~. .~ `.__ * .&apos;// \./ \\`. * .&apos;// | \\`. * .&apos;// .-~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~~~~-._ | _,-~~~~&quot;&quot;&quot;&quot;&quot;&quot;&quot;~-. \\`. * .&apos;//.-&quot; `-. | .-&apos; &quot;-.\\`. * .&apos;//______.============-.. \ | / ..-============.______\\`. * .&apos;______________________________\|/______________________________`. * */ 人生12345678910111213141516171819202122/** * 出生 * || * || * \ / * \/ * 青年 * （年龄 = rand(20,25))） 《============== * || || * || || * || 祝福所有开发工作者 || * || 永远年轻 || * || || * \ / || * \/ || *（ 20 &lt;= 年龄 &lt;= 25） =============== * || * || * \ / * \/ * 等死状态 */ 比克大魔王12345678910111213141516171819202122232425/* _.---..._ ./^ ^-._ ./^C===. ^\. /\ .|&apos; \\ _ ^|.^.| ___.--&apos;_ ( ) . ./ /|| /.---^T\ , | / /||| C&apos; ._`| ._ / __,-/ / /-,|| \ \/ ; /O / _ |) )|, i \./^O\./_,-^/^ ,;-^,&apos; \ |`--/ ..-^^ |_-^ `| \^- /|: i. .-- / &apos;|. i ==&apos; /&apos; |\._ _./`._ // |. ^-ooo.._ _.oo../&apos; | ^-.__./X/ . `| |#######b d#### |&apos; ^^^^ / | _\####### #####b ^^^^^^^^--. ...--^--^^^^^^^_.d###### ######b._ Y _.d######### ##########b._ | _.d############# &quot;Piccolo&quot; no. 2 (from Dragonball Z) --- Steven J. Simmons */ Fuck you123456789101112131415161718192021/* * .::::. * .::::::::. * ::::::::::: FUCK YOU * ..:::::::::::&apos; * &apos;::::::::::::&apos; * .:::::::::: * &apos;::::::::::::::.. * ..::::::::::::. * ``:::::::::::::::: * ::::``:::::::::&apos; .:::. * ::::&apos; &apos;:::::&apos; .::::::::. * .::::&apos; :::: .:::::::&apos;::::. * .:::&apos; ::::: .:::::::::&apos; &apos;:::::. * .::&apos; :::::.:::::::::&apos; &apos;:::::. * .::&apos; ::::::::::::::&apos; ``::::. * ...::: ::::::::::::&apos; ``::. * ```` &apos;:. &apos;:::::::::&apos; ::::.. * &apos;.:::::&apos; &apos;:&apos;````.. */ 围棋12345678910111213141516171819202122232425262728293031323334 // _______________________________________ // / ___________________________________ \// _--&quot;&quot;&quot;&quot;--_ / /_/_/_/_/_|_|_|_|_|_|_|_|_|_\_\_\_\_\ \// / \ / /_/_/_/_J__L_L_L_|_|_|_J_J_J__L_\_\_\_\ \// /\ /\ / /_/_/_J__L_J__L_L_|_|_|_J_J__L_J__L_\_\_\ \// L &quot;&quot;-____-&quot;&quot; J / /_/_J__L_J__L_J_J__L_|_J__L_L_J__L_J__L_\_\ \// \ / / /_/__L_/__L_J__L_J__L_|_J__L_J__L_J__\_J__\_\ \// \_ _/ / /_J__/_J__/__L_J__|__L_|_J__|__L_J__\__L_\__L_\ \// _--&quot;&quot;&quot;&quot;&quot;--_&quot; / / F / F J J | F J | F J | F F J \ J \ \// / \ / /--/-J--/--L--|--L-J--J--|--L--L-J--|--J--\--L-\--\ \///\ /\ / /__/__L_J__J___L_J__J__|__|__|__L__L_J___L__L_J__\__\ \//L &quot;&quot;-_____-&quot;&quot; J / / / / F F J J | | | | | F F J J \ \ \ \//\ / / /--/--/--/--J---L--|--|--|--o--|--|--|--J---L--\--\--\--\ \// \_ _/ / /__/__J__J___L__J___L__L__L__|__J__J__J___L__J___L__L__\__\ \// &quot;--___--&quot; / / / F F J F J J F | J F F J F J J \ \ \// / /--/---/--J---L--J---L--|--J---|---L--|--J---L--J---L--\---\--\ \// / /__J___/___L__/___L__J___L__J___|___L__J___L__J___\__J___\___L__\ \// / / F J / J J | J J | F F | F F \ F J \ \// / /---/---L--J---L---L---L--|---|---|---|---|--J---J---J---L--J---\---\ \// / /___/___/___L__J___J___J___|___|___|___|___|___L___L___L__J___\___\___\ \// / / / / / F F F F F | J J J J J \ \ \ \ \// / /___/___J___J___J___J___J____L___L___|___J___J____L___L___L___L___L___\___\ \// / / / F F F | | J F | J F | | J J J \ \ \// / /___J____/___/___J____L___L___|___J____|____L___|___J___J____L___\___\____L___\ \// / / F / J F J J | J | F | F F J F \ J \ \// / /____/___J____L___/____L___|____L___|____|____|___J____|___J____\___J____L___\____\ \// / / / F / J J F J F | J F J F F \ J \ \ \// / /____/____/___J____L____|____L___J____L____|____J____L___J____|____J____L___\____\____\ \// / \///_______________________________________________________________________________________________\//| |//| hs |//|_______________________________________________________________________________________________| 居中的佛祖1234567891011121314151617181920212223/* _ooOoo_ o8888888o 88&quot; . &quot;88 (| -_- |) O\ = /O ____/`---&apos;\____ .&apos; \\| |// `. / \\||| : |||// \ / _||||| -:- |||||- \ | | \\\ - /// | | | \_| &apos;&apos;\---/&apos;&apos; | | \ .-\__ `-` ___/-. / ___`. .&apos; /--.--\ `. . __ .&quot;&quot; &apos;&lt; `.___\_&lt;|&gt;_/___.&apos; &gt;&apos;&quot;&quot;. | | : `- \`.;`\ _ /`;.`/ - ` : | | \ \ `-. \_ __\ /__ _/ .-` / /======`-.____`-.___\_____/___.-`____.-&apos;====== `=---=&apos;^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 佛祖保佑 永无BUG*/ windows图标123456789101112131415161718/* __ ,-~¨^ ^¨-, _, / / ;^-._...,¨/ / / / / / / / / / / / / /,.-:&apos;&apos;-,_ / / / _,.-:--._ ^ ^:-._ __../ /^ / /¨:.._¨__.; / / / ^ / / / / / / / / / /_,.--:^-._/ / /^ ^¨¨-.___.:^ (R) - G33K */ 七龙珠比克1234567891011121314151617181920212223242526/* /^_.-^ _ --^=_ ./&apos;-^__ _&gt;=\^^==^-. |&apos;/^^_/ /^ \ \.^\\\/\ ,|/| &apos; /&apos; _____\ `\|.^.| |&apos;/ /_--^^ . ^^-./ /|| |/,--^ , | / /||&apos; ._|/ \ / __,-/ / /-,|| \ &apos;/ ; /O / _ |) )|, i \./^O\./_,-^/^ ,;-^,&apos; \ |`--/ ..-^^ |_-^ `| \^-_,/^Y\ | ^^\ _i. \&quot;.--V_/ /| \. ^\._____...--.&gt;^^^^^^-------...._ / i ^--^^ /&apos;|&apos; |\. |./&apos; | ;___...----/^^^^---|. `._\ /^ /&apos; |&apos;_/&apos; \ `| |&apos; ,/&apos; |&apos; \ _|^-.__./&apos;__.^^\ .| ,| _.-^ `\ ,|`_./^^-----^^._ ` ./ / /^ _.-^^/ |&apos; ^ /-^ ./^ /\ `\_ __.-&lt; _,/ ./&apos; |&apos; `\. `i ^^--/._____...--^ . ./ |. `| | / / `| &quot;Piccolo&quot; (from Dragonball Z) --- Steven J. Simmons */ 七龙珠悟空123456789101112131415161718192021222324252627282930313233/* _ \&quot;-._ _.--&quot;~~&quot;--._ \ &quot; ^. ___ / \.-~_.-~ .-----&apos; /\/&quot;\ /~-._ / / __ _/\-.__\L_.-/\ &quot;-. /.-&quot; \ ( ` \_o&gt;&quot;&lt;o_/ \ .--._\ /&apos; \ \: &quot; :/_/ &quot;` / /\ &quot;\ ~ /~&quot; \ I \/]&quot;-._ _.-&quot;[ ___ \|___/ ./ l \___ ___ .--v~ &quot;v` ( `-.__ __.-&apos; ) ~v&quot; ~v--. .-&#123; | : \_ &quot;~&quot; _/ : | &#125;-. / \ | ~-.,___,.-~ | / \ ] \ | | / [ /\ \| : : |/ /\ / ^._ _K.___,^ ^.___,K_ _.^ \ / / &quot;~/ &quot;\ /&quot; \~&quot; \ \ / / / \ _ : _ / \ \ \ .^--./ / Y___________l___________Y \ \.--^. [ \ / | [/ ] | \ / ] | &quot;v&quot; l________[____/]________j -Row &#125;r&quot; / &#125;------t / \ /`-. / | | Y Y / &quot;-._/ &#125;-----v&apos; | : | 7-. / | |_| | l | / . &quot;-._/ l .[_] : \ : r[]/_. / \_____] &quot;--. &quot;-.____/ &quot;Dragonball Z&quot; ---Row */ 超级赛亚人123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134/* MMMMM MMMMMM MMMMMMM MMMMMMMM . MMMMMMMMM HMMMMMMMMMM MMMMMMMMMMMM M MMMMMMMMMMMMM M MMMMMMMMMMMMM M MMMMMMMMMMMMM: oMMMMMMMMMMMMMM .MMMMMMMMMMMMMMo MMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMM. oMMMMMMMMMMMMMMM.M MMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM: H MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM . MMM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM M MMMMMM .MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM M MMMMMMMMMM MM. MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM M MMMMMMMMMMMM MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM .MMMMMMMMMMMMMM MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MM MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM .MMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMM.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM HMMMMMMMMMMMMMMMMMMMMM.MMMMMMMMM.MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMM MMM.oMMMMMMM..MMMMMMMMM:MMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMM MM..MMMMMMM...MMMMMMM. MMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMM ..MMMMMM...MMMMMM ..MMMMMMMMMMMMMMMMMMM MMMMMMM:M.MMM.M.. MMMMM M..MMMMM...MMMMMMMMMMMMMMMMMM MMM MMMM. .M..MM.M...MMMMMM..MMMMM.. MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM . MMMM..M....M.....:MMM .MMMMMM..MMMMMMM...MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM MMM.M.. ...M......MM.MMMMM.......MHM.M .MMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMM..MM. . MMM.....MMMMMM.M.....M ..MM..M MMMMMMMMMMMMMMMMMMM .MMMMMHMM. ..MMMM. MMM............o..... . .MMMMMMMMMMMMMMM MMM. M... .........................M..:.MMMMMMMMMMMM oMMM............ .................M.M.MMMMMMMMM .....MM........................ . MMMMMM M.....M.....................o.MM.MMMMMMMM. M........................M.. ...MMMMMMMMMMMMMo :....MMM..............MMM..oMMMMMMM M...MMM.............MMMMMMM .............:MMMMMMMM M..... MMM.....M M M............. ................M ooM.................MM MoMMMMMoooM MMoooM......................MoooooooH..oMM MHooooMoM.....................MMooooooM........M oooooooMoooM......... o........MoooooooM............ Mooooooooooo.......M.........Moooooooo:..............M MooMoooooooooM...M........:Mooooooooooo:..............M M..oooooooooooo .........Mooooooooooooooo..............M M...Mooo:oooooooo.M....ooooooooooooooooooo..M...........M ...oooooMoooooooM..Mooooooooooooo:oooooooM.M...........M. M...ooooooMoo:ooooMoooooooooooooHoooooooooH:M. ...........: M..MoooooooMoooooooooooooooooo:ooooooMooooMoM..............M M..ooooooooooMooooooooooooooHoooooooMooHooooM...............M ...ooooooooooooooooooo:MooooooooooooooMoMoooM................ M...oooooooooooooooooooooooooooooooooooooMooMM................M ...MooooooooooooooooooooooooooooooooooooooooMo ................ ...MooooooooooooooooooooooooooooooooooooooooM M................M M...ooooooooooooooooooooooooooooooooooooooooM ................M ...MoooooooooooooooooooooooooooooooooooooooMM .:............... .....MooooooooooooooooooooooooooooooooooooMoo .............M M...... ooooooooooooooooooooooooooooooooooooM M..............M M........MooooMMM MM MM MMMMMMMMMooooooooM M...............M .........HM M: MM :MMMMMM M M............... M..........M M MoM M M................M M.........:M MoH M M M MooooHoooMM. M M...............M M..........Moooo MMooM oooooMooooooooM M..............H M.........MooooM Mooo : ooooooMooooMoooM M........ . .o.M H.. .....ooooo oooo M MooooooooooooooM M... MMMMMMMMMMM MMMMMMMMMMooooM M oooo . ooooooMooooooooM .MMMMMMMMMMMMMMM MMMMMMMMMMooooH : ooooH oooooooooooooooo MMMMMMMMMMMMMMM MMMMMMMMMMoooo ooooM Moooooooooooooooo .MMMMMMMMMMMMMMM MMMMMMMMMMoooo ooooM MooooooooooooooooM MMMMMMMMMMMMMMM MMMMMMMMMMoooM ooooM ooooooooooooooooo MMMMMMMMMMM:M MMMMMMMMMMoooM MooooM oooooooooooMoooooo MH........... . ......Mooo. MooooM oooooooooooooooooo M............M M.M......oooo MooooM Moooooooooooooooooo: .........M..... M.M.....Moooo MooooM ooooooooooooooooooM .M............ .......MooooH MooooM oooooooooMoooooooooo M..o...M..o....M .o....HMooooM MooooH MooooooooMooooooooooM .:M...M.......M M..M.....MoooM :oooo: .MooooooooHooMoooooooooM M M... ..oM.M M...M.:.Mooo. MMMMooooo oooooooooooMoooooooooooooM ....M. M M:M..o.Moooooooooooooo MooooooooooooooMooooooooooooM .Mo MooooooooooooooMooooooooooooMoMoooooooooooooo Mooooooooooooooo:ooooooooooooooooooooooooooooo ooooooooooooooooMooooooooooMoooooooooooooooooo ooooooooooooooooMoooooooooooMooooooooooooooooHo ooMooooooooooooooMoooooooooooooooooooooooooooMoM MooMoooooooooooooo.ooooooooooooooooooooooooooo:oM MoooooooooooooooooooooooooooooooooooooooooooooooM MoooMooooooooooooooMooooooooooooooooooooooooooooo. MoooMooooooooooooooMoooooooooooooooooooooooooMooooM MooooooooooooooooooMoooooooooooooooooooooooooMoooooM MooooMoooooooooooooMoooooooooooooooooooooooooMoHooooM ooooooMooooooooooooooooooooooooooooooooooooooooMoMoooM MooooooooooooooooooooMooooooooooooooooooooooooooMoooooH: MoooooooMooooooooooooMoooooooooooooooooooooooooooooHoooM MooooooooMoooooooooooMoooooooooooooooooooooooooMoooMooooM Moooooooooooooooooooooooooooooooooooooooooooooo.oooMooooo MoooooooooooooooooooooooooooooooooooooooooooooMoooooooooM MooooooooooooooooooooMoooooooooooooooooooooooooooooooooM MooooooooooooooooooooMHooooooooooooooooooooMoooo:ooooo MMooooooooooooooooooMoMHoooooooooooooooooooooooMooooo MMoooooooooooooooMMooo MMooooooooooooooooooooooooooM MMMoooooooooooooMooooo oooooooooooooooooooooMooooo MooMMoooooooooMoooMMoM ooooHooooooooooooooooMooooM MooooMooooooMooooMoooM MoooooMoooooooooooooMooooo ooooooMMooooooooMooooM MoooooooooMooooooooooooooM HooooooMoooooooMooooM HoooooooHooMooooooooooooo oooMoooooooooHoooM MoooooooooMoooooooooM HooooooooooooHM MooooooooMMoooooooM MMMMMMMMMMMMMM Moooooo:MooooHMM MMMMMMM: ... MMMMMMMMMMMMMM M............M MMMMMMMMM .... M.MM.......... M.............M M ..............MM M.............. MMMMM............MMMM ..MMMMMMMM ....M MMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMM...M .MMMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMMMMMM :MMMMMMMMMMMMMMMMMMH MMMMMMMMMMMMMMMMMMM By EBEN Jérôme MMMMMMMMMMMMMMMMMM MMMMMMMMMMMMMMM HMMMMMM */ 皮卡丘123456789101112131415161718192021222324252627282930313233343536373839404142/*quu..__ $$$b `---.__ &quot;$$b `--. ___.---uuudP `$$b `.__.------.__ __.---&apos; $$$$&quot; . &quot;$b -&apos; `-.-&apos; $$$&quot; .&apos;| &quot;. d$&quot; _.&apos; | `. / ...&quot; .&apos; | `./ ..::-&apos; _.&apos; | / .:::-&apos; .-&apos; .&apos; : ::&apos;&apos;\ _.&apos; | .&apos; .-. .-. `. .&apos; | : /&apos;$$| .@&quot;$\ `. .&apos; _.-&apos; .&apos;|$u$$| |$$,$$| | &lt; _.-&apos; | `:$$:&apos; :$$$$$: `. `. .-&apos; : `&quot;--&apos; | `-. \ :##. == .###. `. `. `\ |##: :###: | &gt; &gt; |#&apos; `..&apos;`..&apos; `###&apos; x: / / \ xXX| / ./ \ xXXX&apos;| / ./ /`-. `. / / : `- ..........., | / .&apos; | ``:::::::&apos; . |&lt; `. | ``` | x| \ `.:``. | .&apos; /&apos; xXX| `:`M`M&apos;:. | | ; /:&apos; xXXX&apos;| -&apos;MMMMM:&apos; `. .&apos; : /:&apos; |-&apos;MMMM.-&apos; | | .&apos; /&apos; .&apos;MMM.-&apos; `&apos;`&apos; : ,&apos; |MMM&lt; | `&apos; |tbap\ \ :MM.-&apos; \ | .&apos;&apos; \. `. / / .:::::::.. : / | .:::::::::::`. / | .:::------------\ / / .&apos;&apos; &gt;::&apos; / `&apos;,: : .&apos; `:.:&apos; */ ##12 ##12 ##12 ##12 ##12 ##12 ##12 ##12 ##12 ##12 ##12 ##12]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkdownPad发生HTML渲染组件出错]]></title>
    <url>%2F2019%2F05%2F18%2FMarkdownPad%E5%8F%91%E7%94%9FHTML%E6%B8%B2%E6%9F%93%E7%BB%84%E4%BB%B6%E5%87%BA%E9%94%99.html</url>
    <content type="text"><![CDATA[在安装破解MarkdownPad之后，新建一个文档准备练习下MarkdownPad的使用，结果，很不幸地出现了下面的错误：根据它的提示跳转到官网上查看了一番，表示很懵逼….最终还是借助强大的百度搜到其他小伙伴也遇到过这个问题，现将解决方案总结如下。1.下载这个东东： Awesomium 1.6.6 SDK2.下载完成后双击exe安装文件开始安装，点击Next：勾选“I accept the terms in the License Agreement”，点击Next勾选“Yes,remove the older version.”，点击Next安装路径可以使用默认的安装路径，也可以更改安装路径，然后选择Typical标准套餐点击Install开始安装安装完成Finsh3.然后重启MarkdownPad，问题解决。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkdownPad正版破解与汉化]]></title>
    <url>%2F2019%2F05%2F18%2FMarkdownPad%E6%AD%A3%E7%89%88%E7%A0%B4%E8%A7%A3%E4%B8%8E%E6%B1%89%E5%8C%96.html</url>
    <content type="text"><![CDATA[下载先去官网：http://markdownpad.com/ 下载MarkdownPad，如下图： 安装安装过程很简单，一路NexT下去，可使用默认的安装目录，也可以自定义安装目录，这里不做截图展示。 汉化安装完成后，启动MarkdownPad，在工具栏上面点击Tools-Options，如下图：在打开的页面下方有个languages的选项，点击English的选项卡弹出选择窗，选中文，点击save and close按钮后就可以看到中文效果，并弹窗“需要重新启动 MarkdownPad”的提示。如下图： 破解注册码1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== 邮箱地址Soar360@live.com 使用方式点击帮助-专业版激活在弹出的小窗口输入邮箱Soar360@live.com 授权密钥粘贴上面的注册码.点击确定就激活。现在是2019年5月18日，目前依然有效。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F17%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
